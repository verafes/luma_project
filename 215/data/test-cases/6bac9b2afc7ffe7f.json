{"uid":"6bac9b2afc7ffe7f","name":"test_tc_01_15_01_check_that_it_is_possible_to_vote_for_1_star","fullName":"tests.test_reviews_page.TestReviews#test_tc_01_15_01_check_that_it_is_possible_to_vote_for_1_star","historyId":"cfd828a389f57bf8c414a44a924590cf","time":{"start":1707441705804,"stop":1707441708655,"duration":2851},"description":"\n        The user is NOT logged in, located in the product card, section \"Reviews\"\n        1. All required fields are filled with correct data\n        2. Pressed 1 star\n        3.The \"Submit Review\" button is pressed\n        Result: Present in the DOM and visible on the page the message: \"You submitted your review for moderation.\"\n        This code works when run on Win, Mac, Ubuntu on a real laptop and has the features of working on GitHub Action.\n        When interacting with the GitHub Action, it checks not for the text of the \"Success\" message, but for the \"Success\" URL\"\n        ","descriptionHtml":"<pre><code>    The user is NOT logged in, located in the product card, section &quot;Reviews&quot;\n    1. All required fields are filled with correct data\n    2. Pressed 1 star\n    3.The &quot;Submit Review&quot; button is pressed\n    Result: Present in the DOM and visible on the page the message: &quot;You submitted your review for moderation.&quot;\n    This code works when run on Win, Mac, Ubuntu on a real laptop and has the features of working on GitHub Action.\n    When interacting with the GitHub Action, it checks not for the text of the &quot;Success&quot; message, but for the &quot;Success&quot; URL&quot;\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <textarea name=\"detail\" id=\"review_field\" cols=\"5\" rows=\"3\" data-validate=\"{required:true}\" data-bind=\"value: review().detail\" aria-required=\"true\"></textarea> is not clickable at point (608, 837). Other element would receive the click: <fieldset class=\"field required review-field-ratings\">...</fieldset>\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n#0 0x55bf15e31d93 <unknown>\n#1 0x55bf15b15337 <unknown>\n#2 0x55bf15b67e2e <unknown>\n#3 0x55bf15b65bd0 <unknown>\n#4 0x55bf15b6344a <unknown>\n#5 0x55bf15b62226 <unknown>\n#6 0x55bf15b556b7 <unknown>\n#7 0x55bf15b83442 <unknown>\n#8 0x55bf15b55028 <unknown>\n#9 0x55bf15b8360e <unknown>\n#10 0x55bf15ba212d <unknown>\n#11 0x55bf15b831e3 <unknown>\n#12 0x55bf15b53135 <unknown>\n#13 0x55bf15b5413e <unknown>\n#14 0x55bf15df5e4b <unknown>\n#15 0x55bf15df9dfa <unknown>\n#16 0x55bf15de26d5 <unknown>\n#17 0x55bf15dfaa6f <unknown>\n#18 0x55bf15dc669f <unknown>\n#19 0x55bf15e1f098 <unknown>\n#20 0x55bf15e1f262 <unknown>\n#21 0x55bf15e30f34 <unknown>\n#22 0x7fc555894ac3 <unknown>","statusTrace":"self = <test_reviews_page.TestReviews object at 0x7faa8ee13390>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c31e0359dcad2d02ab06308b50dda059\")>\n\n    def test_tc_01_15_01_check_that_it_is_possible_to_vote_for_1_star(self, driver):\n        \"\"\"\n        The user is NOT logged in, located in the product card, section \"Reviews\"\n        1. All required fields are filled with correct data\n        2. Pressed 1 star\n        3.The \"Submit Review\" button is pressed\n        Result: Present in the DOM and visible on the page the message: \"You submitted your review for moderation.\"\n        This code works when run on Win, Mac, Ubuntu on a real laptop and has the features of working on GitHub Action.\n        When interacting with the GitHub Action, it checks not for the text of the \"Success\" message, but for the \"Success\" URL\"\n        \"\"\"\n    \n        \"\"\"Steps\"\"\"\n        page = ReviewsPage(driver, REVIEWS_URL_GENERAL)\n        page.open()\n    \n        \"\"\"Get the current URL and print it\"\"\"\n        page.get_the_current_URL_and_print_it()\n    \n        \"\"\"Steps\"\"\"\n        page.open_review_menu()\n        page.star_1_review_correct()\n        page.nickname_input_review_correct()\n        page.summary_input_review_correct()\n>       page.review_input_review_correct()\n\ntests/test_reviews_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/reviews_page.py:72: in review_input_review_correct\n    review_input_element.click()\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7faa8f028fd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55bf15e1f262 \\\\u003Cunknown>\\\\n#21 0x55bf15e30f34 \\\\u003Cunknown>\\\\n#22 0x7fc555894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <textarea name=\"detail\" id=\"review_field\" cols=\"5\" rows=\"3\" data-validate=\"{required:true}\" data-bind=\"value: review().detail\" aria-required=\"true\"></textarea> is not clickable at point (608, 837). Other element would receive the click: <fieldset class=\"field required review-field-ratings\">...</fieldset>\nE         (Session info: chrome=121.0.6167.139)\nE       Stacktrace:\nE       #0 0x55bf15e31d93 <unknown>\nE       #1 0x55bf15b15337 <unknown>\nE       #2 0x55bf15b67e2e <unknown>\nE       #3 0x55bf15b65bd0 <unknown>\nE       #4 0x55bf15b6344a <unknown>\nE       #5 0x55bf15b62226 <unknown>\nE       #6 0x55bf15b556b7 <unknown>\nE       #7 0x55bf15b83442 <unknown>\nE       #8 0x55bf15b55028 <unknown>\nE       #9 0x55bf15b8360e <unknown>\nE       #10 0x55bf15ba212d <unknown>\nE       #11 0x55bf15b831e3 <unknown>\nE       #12 0x55bf15b53135 <unknown>\nE       #13 0x55bf15b5413e <unknown>\nE       #14 0x55bf15df5e4b <unknown>\nE       #15 0x55bf15df9dfa <unknown>\nE       #16 0x55bf15de26d5 <unknown>\nE       #17 0x55bf15dfaa6f <unknown>\nE       #18 0x55bf15dc669f <unknown>\nE       #19 0x55bf15e1f098 <unknown>\nE       #20 0x55bf15e1f262 <unknown>\nE       #21 0x55bf15e30f34 <unknown>\nE       #22 0x7fc555894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1707440874721,"stop":1707440874783,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder","time":{"start":1707440874783,"stop":1707440874784,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1707441704845,"stop":1707441705804,"duration":959},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        The user is NOT logged in, located in the product card, section \"Reviews\"\n        1. All required fields are filled with correct data\n        2. Pressed 1 star\n        3.The \"Submit Review\" button is pressed\n        Result: Present in the DOM and visible on the page the message: \"You submitted your review for moderation.\"\n        This code works when run on Win, Mac, Ubuntu on a real laptop and has the features of working on GitHub Action.\n        When interacting with the GitHub Action, it checks not for the text of the \"Success\" message, but for the \"Success\" URL\"\n        ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <textarea name=\"detail\" id=\"review_field\" cols=\"5\" rows=\"3\" data-validate=\"{required:true}\" data-bind=\"value: review().detail\" aria-required=\"true\"></textarea> is not clickable at point (608, 837). Other element would receive the click: <fieldset class=\"field required review-field-ratings\">...</fieldset>\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n#0 0x55bf15e31d93 <unknown>\n#1 0x55bf15b15337 <unknown>\n#2 0x55bf15b67e2e <unknown>\n#3 0x55bf15b65bd0 <unknown>\n#4 0x55bf15b6344a <unknown>\n#5 0x55bf15b62226 <unknown>\n#6 0x55bf15b556b7 <unknown>\n#7 0x55bf15b83442 <unknown>\n#8 0x55bf15b55028 <unknown>\n#9 0x55bf15b8360e <unknown>\n#10 0x55bf15ba212d <unknown>\n#11 0x55bf15b831e3 <unknown>\n#12 0x55bf15b53135 <unknown>\n#13 0x55bf15b5413e <unknown>\n#14 0x55bf15df5e4b <unknown>\n#15 0x55bf15df9dfa <unknown>\n#16 0x55bf15de26d5 <unknown>\n#17 0x55bf15dfaa6f <unknown>\n#18 0x55bf15dc669f <unknown>\n#19 0x55bf15e1f098 <unknown>\n#20 0x55bf15e1f262 <unknown>\n#21 0x55bf15e30f34 <unknown>\n#22 0x7fc555894ac3 <unknown>","statusTrace":"self = <test_reviews_page.TestReviews object at 0x7faa8ee13390>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c31e0359dcad2d02ab06308b50dda059\")>\n\n    def test_tc_01_15_01_check_that_it_is_possible_to_vote_for_1_star(self, driver):\n        \"\"\"\n        The user is NOT logged in, located in the product card, section \"Reviews\"\n        1. All required fields are filled with correct data\n        2. Pressed 1 star\n        3.The \"Submit Review\" button is pressed\n        Result: Present in the DOM and visible on the page the message: \"You submitted your review for moderation.\"\n        This code works when run on Win, Mac, Ubuntu on a real laptop and has the features of working on GitHub Action.\n        When interacting with the GitHub Action, it checks not for the text of the \"Success\" message, but for the \"Success\" URL\"\n        \"\"\"\n    \n        \"\"\"Steps\"\"\"\n        page = ReviewsPage(driver, REVIEWS_URL_GENERAL)\n        page.open()\n    \n        \"\"\"Get the current URL and print it\"\"\"\n        page.get_the_current_URL_and_print_it()\n    \n        \"\"\"Steps\"\"\"\n        page.open_review_menu()\n        page.star_1_review_correct()\n        page.nickname_input_review_correct()\n        page.summary_input_review_correct()\n>       page.review_input_review_correct()\n\ntests/test_reviews_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/reviews_page.py:72: in review_input_review_correct\n    review_input_element.click()\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7faa8f028fd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55bf15e1f262 \\\\u003Cunknown>\\\\n#21 0x55bf15e30f34 \\\\u003Cunknown>\\\\n#22 0x7fc555894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <textarea name=\"detail\" id=\"review_field\" cols=\"5\" rows=\"3\" data-validate=\"{required:true}\" data-bind=\"value: review().detail\" aria-required=\"true\"></textarea> is not clickable at point (608, 837). Other element would receive the click: <fieldset class=\"field required review-field-ratings\">...</fieldset>\nE         (Session info: chrome=121.0.6167.139)\nE       Stacktrace:\nE       #0 0x55bf15e31d93 <unknown>\nE       #1 0x55bf15b15337 <unknown>\nE       #2 0x55bf15b67e2e <unknown>\nE       #3 0x55bf15b65bd0 <unknown>\nE       #4 0x55bf15b6344a <unknown>\nE       #5 0x55bf15b62226 <unknown>\nE       #6 0x55bf15b556b7 <unknown>\nE       #7 0x55bf15b83442 <unknown>\nE       #8 0x55bf15b55028 <unknown>\nE       #9 0x55bf15b8360e <unknown>\nE       #10 0x55bf15ba212d <unknown>\nE       #11 0x55bf15b831e3 <unknown>\nE       #12 0x55bf15b53135 <unknown>\nE       #13 0x55bf15b5413e <unknown>\nE       #14 0x55bf15df5e4b <unknown>\nE       #15 0x55bf15df9dfa <unknown>\nE       #16 0x55bf15de26d5 <unknown>\nE       #17 0x55bf15dfaa6f <unknown>\nE       #18 0x55bf15dc669f <unknown>\nE       #19 0x55bf15e1f098 <unknown>\nE       #20 0x55bf15e1f262 <unknown>\nE       #21 0x55bf15e30f34 <unknown>\nE       #22 0x7fc555894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Open a browser","time":{"start":1707441705804,"stop":1707441706873,"duration":1069},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Find clickable elements","time":{"start":1707441706877,"stop":1707441706902,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', '#tab-label-reviews-title')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Find clickable elements","time":{"start":1707441706953,"stop":1707441706978,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', '#Rating_1_label')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Find clickable elements","time":{"start":1707441707005,"stop":1707441707055,"duration":50},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', '#nickname_field')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Find clickable elements","time":{"start":1707441707461,"stop":1707441707480,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', '#summary_field')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Find clickable elements","time":{"start":1707441707568,"stop":1707441707601,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', '#review_field')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4653ea5a309db761","name":"Screenshot","source":"4653ea5a309db761.png","type":"image/png","size":89460},{"uid":"17a5de00a13c72b9","name":"HTML source","source":"17a5de00a13c72b9.html","type":"text/html","size":133996}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":6,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1707441708811,"stop":1707441708881,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder::0","time":{"start":1707442192637,"stop":1707442192637,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_reviews_page"},{"name":"subSuite","value":"TestReviews"},{"name":"host","value":"fv-az985-252"},{"name":"thread","value":"3001-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_reviews_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":5,"unknown":0,"total":6},"items":[{"uid":"701b2b97aae9a5b1","reportUrl":"https://verafes.github.io/luma_project/214//#testresult/701b2b97aae9a5b1","status":"passed","time":{"start":1707355229116,"stop":1707355234293,"duration":5177}},{"uid":"7ca323b49b657827","reportUrl":"https://verafes.github.io/luma_project/213//#testresult/7ca323b49b657827","status":"passed","time":{"start":1707268794670,"stop":1707268799012,"duration":4342}},{"uid":"da26da42d7f601aa","reportUrl":"https://verafes.github.io/luma_project/212//#testresult/da26da42d7f601aa","status":"passed","time":{"start":1707182479413,"stop":1707182484278,"duration":4865}},{"uid":"ee3d682aaf48a76b","reportUrl":"https://verafes.github.io/luma_project/211//#testresult/ee3d682aaf48a76b","status":"passed","time":{"start":1707096194694,"stop":1707096199441,"duration":4747}},{"uid":"1c91f2c59959937","reportUrl":"https://verafes.github.io/luma_project/210//#testresult/1c91f2c59959937","status":"passed","time":{"start":1707009980038,"stop":1707009985042,"duration":5004}}]},"tags":[]},"source":"6bac9b2afc7ffe7f.json","parameterValues":[]}