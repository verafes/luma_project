{"uid":"9ac1c255d66d69bd","name":"test_check_card_price","fullName":"tests.test_main_page.TestHotSellerSection#test_check_card_price","historyId":"f4026d9f96acc9996f781ecba7818e56","time":{"start":1738200902581,"stop":1738201202602,"duration":300021},"description":"This test checks that the card has a price and a price in USD","descriptionHtml":"<p>This test checks that the card has a price and a price in USD</p>\n","status":"skipped","statusMessage":"XFAIL In CI the test failed in PR#203\n\nselenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.568\n  (Session info: chrome=132.0.6834.110)\nStacktrace:\n#0 0x5572b9f70dca <unknown>\n#1 0x5572b9a673f0 <unknown>\n#2 0x5572b9a4f6ae <unknown>\n#3 0x5572b9a4f3b9 <unknown>\n#4 0x5572b9a4d346 <unknown>\n#5 0x5572b9a4db2f <unknown>\n#6 0x5572b9a5d447 <unknown>\n#7 0x5572b9a746b4 <unknown>\n#8 0x5572b9a7a5ab <unknown>\n#9 0x5572b9a4e237 <unknown>\n#10 0x5572b9a7440c <unknown>\n#11 0x5572b9afa849 <unknown>\n#12 0x5572b9adb833 <unknown>\n#13 0x5572b9aa85a0 <unknown>\n#14 0x5572b9aa9ece <unknown>\n#15 0x5572b9f3abdb <unknown>\n#16 0x5572b9f3eb67 <unknown>\n#17 0x5572b9f263bc <unknown>\n#18 0x5572b9f3f727 <unknown>\n#19 0x5572b9f0a74f <unknown>\n#20 0x5572b9f5f938 <unknown>\n#21 0x5572b9f5fb00 <unknown>\n#22 0x5572b9f6fc46 <unknown>\n#23 0x7fb7bc49ca94 <unknown>\n#24 0x7fb7bc529c3c <unknown>","statusTrace":"self = <test_main_page.TestMainPage.TestHotSellerSection object at 0x7f7b721c3890>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ed386024c26e6868f65a09bc1a17ac57\")>\n\n    @pytest.mark.xfail(reason=\"In CI the test failed in PR#203\")\n    def test_check_card_price(self, driver):\n        \"\"\"This test checks that the card has a price and a price in USD\"\"\"\n        page = MainPage(driver, MAIN_PAGE_URL)\n>       page.open()\n\ntests/test_main_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:19: in open\n    self.driver.get(self.url)\n/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7b72041950>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#22 0x5572b9f6fc46 \\\\u003Cunknown>\\\\n#23 0x7fb7bc49ca94 \\\\u003Cunknown>\\\\n#24 0x7fb7bc529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.568\nE         (Session info: chrome=132.0.6834.110)\nE       Stacktrace:\nE       #0 0x5572b9f70dca <unknown>\nE       #1 0x5572b9a673f0 <unknown>\nE       #2 0x5572b9a4f6ae <unknown>\nE       #3 0x5572b9a4f3b9 <unknown>\nE       #4 0x5572b9a4d346 <unknown>\nE       #5 0x5572b9a4db2f <unknown>\nE       #6 0x5572b9a5d447 <unknown>\nE       #7 0x5572b9a746b4 <unknown>\nE       #8 0x5572b9a7a5ab <unknown>\nE       #9 0x5572b9a4e237 <unknown>\nE       #10 0x5572b9a7440c <unknown>\nE       #11 0x5572b9afa849 <unknown>\nE       #12 0x5572b9adb833 <unknown>\nE       #13 0x5572b9aa85a0 <unknown>\nE       #14 0x5572b9aa9ece <unknown>\nE       #15 0x5572b9f3abdb <unknown>\nE       #16 0x5572b9f3eb67 <unknown>\nE       #17 0x5572b9f263bc <unknown>\nE       #18 0x5572b9f3f727 <unknown>\nE       #19 0x5572b9f0a74f <unknown>\nE       #20 0x5572b9f5f938 <unknown>\nE       #21 0x5572b9f5fb00 <unknown>\nE       #22 0x5572b9f6fc46 <unknown>\nE       #23 0x7fb7bc49ca94 <unknown>\nE       #24 0x7fb7bc529c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1738200416346,"stop":1738200416408,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder","time":{"start":1738200416408,"stop":1738200416408,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1738200901393,"stop":1738200902581,"duration":1188},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"This test checks that the card has a price and a price in USD","status":"skipped","statusMessage":"XFAIL In CI the test failed in PR#203\n\nselenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.568\n  (Session info: chrome=132.0.6834.110)\nStacktrace:\n#0 0x5572b9f70dca <unknown>\n#1 0x5572b9a673f0 <unknown>\n#2 0x5572b9a4f6ae <unknown>\n#3 0x5572b9a4f3b9 <unknown>\n#4 0x5572b9a4d346 <unknown>\n#5 0x5572b9a4db2f <unknown>\n#6 0x5572b9a5d447 <unknown>\n#7 0x5572b9a746b4 <unknown>\n#8 0x5572b9a7a5ab <unknown>\n#9 0x5572b9a4e237 <unknown>\n#10 0x5572b9a7440c <unknown>\n#11 0x5572b9afa849 <unknown>\n#12 0x5572b9adb833 <unknown>\n#13 0x5572b9aa85a0 <unknown>\n#14 0x5572b9aa9ece <unknown>\n#15 0x5572b9f3abdb <unknown>\n#16 0x5572b9f3eb67 <unknown>\n#17 0x5572b9f263bc <unknown>\n#18 0x5572b9f3f727 <unknown>\n#19 0x5572b9f0a74f <unknown>\n#20 0x5572b9f5f938 <unknown>\n#21 0x5572b9f5fb00 <unknown>\n#22 0x5572b9f6fc46 <unknown>\n#23 0x7fb7bc49ca94 <unknown>\n#24 0x7fb7bc529c3c <unknown>","statusTrace":"self = <test_main_page.TestMainPage.TestHotSellerSection object at 0x7f7b721c3890>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ed386024c26e6868f65a09bc1a17ac57\")>\n\n    @pytest.mark.xfail(reason=\"In CI the test failed in PR#203\")\n    def test_check_card_price(self, driver):\n        \"\"\"This test checks that the card has a price and a price in USD\"\"\"\n        page = MainPage(driver, MAIN_PAGE_URL)\n>       page.open()\n\ntests/test_main_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:19: in open\n    self.driver.get(self.url)\n/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7b72041950>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#22 0x5572b9f6fc46 \\\\u003Cunknown>\\\\n#23 0x7fb7bc49ca94 \\\\u003Cunknown>\\\\n#24 0x7fb7bc529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.568\nE         (Session info: chrome=132.0.6834.110)\nE       Stacktrace:\nE       #0 0x5572b9f70dca <unknown>\nE       #1 0x5572b9a673f0 <unknown>\nE       #2 0x5572b9a4f6ae <unknown>\nE       #3 0x5572b9a4f3b9 <unknown>\nE       #4 0x5572b9a4d346 <unknown>\nE       #5 0x5572b9a4db2f <unknown>\nE       #6 0x5572b9a5d447 <unknown>\nE       #7 0x5572b9a746b4 <unknown>\nE       #8 0x5572b9a7a5ab <unknown>\nE       #9 0x5572b9a4e237 <unknown>\nE       #10 0x5572b9a7440c <unknown>\nE       #11 0x5572b9afa849 <unknown>\nE       #12 0x5572b9adb833 <unknown>\nE       #13 0x5572b9aa85a0 <unknown>\nE       #14 0x5572b9aa9ece <unknown>\nE       #15 0x5572b9f3abdb <unknown>\nE       #16 0x5572b9f3eb67 <unknown>\nE       #17 0x5572b9f263bc <unknown>\nE       #18 0x5572b9f3f727 <unknown>\nE       #19 0x5572b9f0a74f <unknown>\nE       #20 0x5572b9f5f938 <unknown>\nE       #21 0x5572b9f5fb00 <unknown>\nE       #22 0x5572b9f6fc46 <unknown>\nE       #23 0x7fb7bc49ca94 <unknown>\nE       #24 0x7fb7bc529c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[{"name":"Open a browser","time":{"start":1738200902581,"stop":1738201202601,"duration":300020},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.568\n  (Session info: chrome=132.0.6834.110)\nStacktrace:\n#0 0x5572b9f70dca <unknown>\n#1 0x5572b9a673f0 <unknown>\n#2 0x5572b9a4f6ae <unknown>\n#3 0x5572b9a4f3b9 <unknown>\n#4 0x5572b9a4d346 <unknown>\n#5 0x5572b9a4db2f <unknown>\n#6 0x5572b9a5d447 <unknown>\n#7 0x5572b9a746b4 <unknown>\n#8 0x5572b9a7a5ab <unknown>\n#9 0x5572b9a4e237 <unknown>\n#10 0x5572b9a7440c <unknown>\n#11 0x5572b9afa849 <unknown>\n#12 0x5572b9adb833 <unknown>\n#13 0x5572b9aa85a0 <unknown>\n#14 0x5572b9aa9ece <unknown>\n#15 0x5572b9f3abdb <unknown>\n#16 0x5572b9f3eb67 <unknown>\n#17 0x5572b9f263bc <unknown>\n#18 0x5572b9f3f727 <unknown>\n#19 0x5572b9f0a74f <unknown>\n#20 0x5572b9f5f938 <unknown>\n#21 0x5572b9f5fb00 <unknown>\n#22 0x5572b9f6fc46 <unknown>\n#23 0x7fb7bc49ca94 <unknown>\n#24 0x7fb7bc529c3c <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/base_page.py\", line 19, in open\n    self.driver.get(self.url)\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 353, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"86a636a2f8d674e4","name":"Screenshot","source":"86a636a2f8d674e4.png","type":"image/png","size":548003},{"uid":"4f92b5239face00a","name":"HTML source","source":"4f92b5239face00a.html","type":"text/html","size":146017}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1738201202875,"stop":1738201203028,"duration":153},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder::0","time":{"start":1738202186026,"stop":1738202186026,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Testing Hot Seller Section"},{"name":"epic","value":"Main Page"},{"name":"tag","value":"@pytest.mark.xfail(reason='In CI the test failed in PR#203')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_main_page"},{"name":"subSuite","value":"TestMainPage"},{"name":"host","value":"fv-az1937-364"},{"name":"thread","value":"2794-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_main_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":3,"passed":2,"unknown":0,"total":5},"items":[{"uid":"8bc161d78ae12d43","reportUrl":"https://verafes.github.io/luma_project/570//#testresult/8bc161d78ae12d43","status":"passed","statusDetails":"XPASS In CI the test failed in PR#203","time":{"start":1738115023577,"stop":1738115024872,"duration":1295}},{"uid":"9b60461217821247","reportUrl":"https://verafes.github.io/luma_project/569//#testresult/9b60461217821247","status":"passed","statusDetails":"XPASS In CI the test failed in PR#203","time":{"start":1738028598053,"stop":1738028599196,"duration":1143}},{"uid":"5ff19ad2a7f705be","reportUrl":"https://verafes.github.io/luma_project/568//#testresult/5ff19ad2a7f705be","status":"skipped","statusDetails":"XFAIL In CI the test failed in PR#203\n\nselenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5576a08047ca <unknown>\n#1 0x5576a02fc2f0 <unknown>\n#2 0x5576a034c035 <unknown>\n#3 0x5576a034c251 <unknown>\n#4 0x5576a0392054 <unknown>\n#5 0x5576a03709dd <unknown>\n#6 0x5576a038f3b3 <unknown>\n#7 0x5576a0370753 <unknown>\n#8 0x5576a033dbaa <unknown>\n#9 0x5576a033edfe <unknown>\n#10 0x5576a07cf38b <unknown>\n#11 0x5576a07d3307 <unknown>\n#12 0x5576a07bbe7c <unknown>\n#13 0x5576a07d3ec7 <unknown>\n#14 0x5576a07a024f <unknown>\n#15 0x5576a07f32f8 <unknown>\n#16 0x5576a07f34c0 <unknown>\n#17 0x5576a0803646 <unknown>\n#18 0x7f36a709ca94 <unknown>\n#19 0x7f36a7129c3c <unknown>","time":{"start":1737942838419,"stop":1737942843926,"duration":5507}},{"uid":"8311303ab0763762","reportUrl":"https://verafes.github.io/luma_project/567//#testresult/8311303ab0763762","status":"skipped","statusDetails":"XFAIL In CI the test failed in PR#203\n\nselenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5598d4b0c7ca <unknown>\n#1 0x5598d46042f0 <unknown>\n#2 0x5598d4654035 <unknown>\n#3 0x5598d4654251 <unknown>\n#4 0x5598d469a054 <unknown>\n#5 0x5598d46789dd <unknown>\n#6 0x5598d46973b3 <unknown>\n#7 0x5598d4678753 <unknown>\n#8 0x5598d4645baa <unknown>\n#9 0x5598d4646dfe <unknown>\n#10 0x5598d4ad738b <unknown>\n#11 0x5598d4adb307 <unknown>\n#12 0x5598d4ac3e7c <unknown>\n#13 0x5598d4adbec7 <unknown>\n#14 0x5598d4aa824f <unknown>\n#15 0x5598d4afb2f8 <unknown>\n#16 0x5598d4afb4c0 <unknown>\n#17 0x5598d4b0b646 <unknown>\n#18 0x7f6aaa09ca94 <unknown>\n#19 0x7f6aaa129c3c <unknown>","time":{"start":1737856476167,"stop":1737856481538,"duration":5371}}]},"tags":["@pytest.mark.xfail(reason='In CI the test failed in PR#203')"]},"source":"9ac1c255d66d69bd.json","parameterValues":[]}