{
  "uid" : "e009d761d17a4dfc",
  "name" : "tc 07.02.05 Verify the subtotal amounts in the item cart and in the Summary cart are the same.",
  "fullName" : "tests.test_shopping_cart.TestShoppingCartFull#test_tc_07_02_05_subtotal_in_the_item_cart_and_in_the_summarys_cart_are_equal",
  "historyId" : "f85ae5f08a94ef0c9e294ff64141268a",
  "time" : {
    "start" : 1710033699984,
    "stop" : 1710033699984,
    "duration" : 0
  },
  "description" : "Verify the subtotal amounts in the item cart and in the summary cart are the same.",
  "descriptionHtml" : "<p>Verify the subtotal amounts in the item cart and in the summary cart are the same.</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"submit\" title=\"Add to Cart\" class=\"action primary tocart\" id=\"product-addtocart-button\">...</button> is not clickable at point (1187, 861). Other element would receive the click: <div class=\"fieldset\">...</div>\n  (Session info: chrome=122.0.6261.94)\nStacktrace:\n#0 0x55a94b950e93 <unknown>\n#1 0x55a94b648ce6 <unknown>\n#2 0x55a94b69aa73 <unknown>\n#3 0x55a94b69898e <unknown>\n#4 0x55a94b696367 <unknown>\n#5 0x55a94b695732 <unknown>\n#6 0x55a94b688d27 <unknown>\n#7 0x55a94b6b5eb2 <unknown>\n#8 0x55a94b6886b8 <unknown>\n#9 0x55a94b6b607e <unknown>\n#10 0x55a94b6d4899 <unknown>\n#11 0x55a94b6b5c53 <unknown>\n#12 0x55a94b686db3 <unknown>\n#13 0x55a94b68777e <unknown>\n#14 0x55a94b9167cb <unknown>\n#15 0x55a94b91a7e5 <unknown>\n#16 0x55a94b9040e1 <unknown>\n#17 0x55a94b91b372 <unknown>\n#18 0x55a94b8e81bf <unknown>\n#19 0x55a94b93f488 <unknown>\n#20 0x55a94b93f683 <unknown>\n#21 0x55a94b950044 <unknown>\n#22 0x7f81ac094ac3 <unknown>",
  "statusTrace" : "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e3de1601a81f5b2b4aac17ed9b7c8406\")>\n\n    @pytest.fixture(scope=\"function\")\n    def full_cart_page(driver):\n        driver.get(ITEM_CART_URL)\n        size_button = wait(driver, 5).until(EC.presence_of_element_located(shopping_locators.SIZE_BUTTON))\n        size_button.click()\n        color_button = wait(driver, 3).until(EC.presence_of_element_located(shopping_locators.COLOR_BUTTON))\n        color_button.click()\n        add_to_cart_button = wait(driver, 3).until(EC.presence_of_element_located(shopping_locators.ADD_TO_CART_BUTTON))\n>       add_to_cart_button.click()\n\ntests/test_shopping_cart.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f66993a9810>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55a94b93f683 \\\\u003Cunknown>\\\\n#21 0x55a94b950044 \\\\u003Cunknown>\\\\n#22 0x7f81ac094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"submit\" title=\"Add to Cart\" class=\"action primary tocart\" id=\"product-addtocart-button\">...</button> is not clickable at point (1187, 861). Other element would receive the click: <div class=\"fieldset\">...</div>\nE         (Session info: chrome=122.0.6261.94)\nE       Stacktrace:\nE       #0 0x55a94b950e93 <unknown>\nE       #1 0x55a94b648ce6 <unknown>\nE       #2 0x55a94b69aa73 <unknown>\nE       #3 0x55a94b69898e <unknown>\nE       #4 0x55a94b696367 <unknown>\nE       #5 0x55a94b695732 <unknown>\nE       #6 0x55a94b688d27 <unknown>\nE       #7 0x55a94b6b5eb2 <unknown>\nE       #8 0x55a94b6886b8 <unknown>\nE       #9 0x55a94b6b607e <unknown>\nE       #10 0x55a94b6d4899 <unknown>\nE       #11 0x55a94b6b5c53 <unknown>\nE       #12 0x55a94b686db3 <unknown>\nE       #13 0x55a94b68777e <unknown>\nE       #14 0x55a94b9167cb <unknown>\nE       #15 0x55a94b91a7e5 <unknown>\nE       #16 0x55a94b9040e1 <unknown>\nE       #17 0x55a94b91b372 <unknown>\nE       #18 0x55a94b8e81bf <unknown>\nE       #19 0x55a94b93f488 <unknown>\nE       #20 0x55a94b93f683 <unknown>\nE       #21 0x55a94b950044 <unknown>\nE       #22 0x7f81ac094ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "full_cart_page",
    "time" : {
      "start" : 1710033701008,
      "stop" : 1710033703662,
      "duration" : 2654
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"submit\" title=\"Add to Cart\" class=\"action primary tocart\" id=\"product-addtocart-button\">...</button> is not clickable at point (1187, 861). Other element would receive the click: <div class=\"fieldset\">...</div>\n  (Session info: chrome=122.0.6261.94)\nStacktrace:\n#0 0x55a94b950e93 <unknown>\n#1 0x55a94b648ce6 <unknown>\n#2 0x55a94b69aa73 <unknown>\n#3 0x55a94b69898e <unknown>\n#4 0x55a94b696367 <unknown>\n#5 0x55a94b695732 <unknown>\n#6 0x55a94b688d27 <unknown>\n#7 0x55a94b6b5eb2 <unknown>\n#8 0x55a94b6886b8 <unknown>\n#9 0x55a94b6b607e <unknown>\n#10 0x55a94b6d4899 <unknown>\n#11 0x55a94b6b5c53 <unknown>\n#12 0x55a94b686db3 <unknown>\n#13 0x55a94b68777e <unknown>\n#14 0x55a94b9167cb <unknown>\n#15 0x55a94b91a7e5 <unknown>\n#16 0x55a94b9040e1 <unknown>\n#17 0x55a94b91b372 <unknown>\n#18 0x55a94b8e81bf <unknown>\n#19 0x55a94b93f488 <unknown>\n#20 0x55a94b93f683 <unknown>\n#21 0x55a94b950044 <unknown>\n#22 0x7f81ac094ac3 <unknown>\n\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 902, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/tests/test_shopping_cart.py\", line 18, in full_cart_page\n    add_to_cart_button.click()\n  File \"/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "clear_allure_result_folder",
    "time" : {
      "start" : 1710032898287,
      "stop" : 1710032898287,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1710033699984,
      "stop" : 1710033701008,
      "duration" : 1024
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1710032898224,
      "stop" : 1710032898287,
      "duration" : 63
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "clear_allure_result_folder::0",
    "time" : {
      "start" : 1710033990781,
      "stop" : 1710033990781,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1710033703686,
      "stop" : 1710033703754,
      "duration" : 68
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Shopping Cart is full"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_shopping_cart"
  }, {
    "name" : "subSuite",
    "value" : "TestShoppingCartFull"
  }, {
    "name" : "host",
    "value" : "fv-az1118-482"
  }, {
    "name" : "thread",
    "value" : "3057-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_shopping_cart"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e009d761d17a4dfc.json",
  "parameterValues" : [ ]
}