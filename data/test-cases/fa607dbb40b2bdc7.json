{
  "uid" : "fa607dbb40b2bdc7",
  "name" : "TC 03.02.02 to 03_02_10 Verify Error on Failed Login with invalid credentials",
  "fullName" : "tests.test_sign_in.TestFailedLogin#test_03_02_02_to_10_error_if_login_with_invalid_credentials",
  "historyId" : "4583913b6850c24cdb81747bf33f657d",
  "time" : {
    "start" : 1733019671848,
    "stop" : 1733019673128,
    "duration" : 1280
  },
  "description" : "Check error on Failed Login with invalid credentials, case-sensitive password and password with spaces",
  "descriptionHtml" : "<p>Check error on Failed Login with invalid credentials, case-sensitive password and password with spaces</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x55e92ebf131a <unknown>\n#1 0x55e92e7076e0 <unknown>\n#2 0x55e92e75d0f6 <unknown>\n#3 0x55e92e75b05d <unknown>\n#4 0x55e92e758775 <unknown>\n#5 0x55e92e75792f <unknown>\n#6 0x55e92e74b29a <unknown>\n#7 0x55e92e77a462 <unknown>\n#8 0x55e92e74aa18 <unknown>\n#9 0x55e92e77a62e <unknown>\n#10 0x55e92e798ed7 <unknown>\n#11 0x55e92e77a203 <unknown>\n#12 0x55e92e748cc0 <unknown>\n#13 0x55e92e749c9e <unknown>\n#14 0x55e92ebbed0b <unknown>\n#15 0x55e92ebc2c92 <unknown>\n#16 0x55e92ebabb3c <unknown>\n#17 0x55e92ebc3807 <unknown>\n#18 0x55e92eb910df <unknown>\n#19 0x55e92ebe0578 <unknown>\n#20 0x55e92ebe0740 <unknown>\n#21 0x55e92ebf0196 <unknown>\n#22 0x7f3bba894ac3 <unknown>",
  "statusTrace" : "self = <test_sign_in.TestFailedLogin object at 0x7f9b6a956a10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"350e5497d806706e40f0f1d0805e0c5f\")>\nsign_in_page = <pages.sign_in_page.SignInPage object at 0x7f9b6c0185d0>\nemail = 'teston110@mailinator.com', password = 'Test#12p@ssword'\n\n    @allure.title('TC 03.02.02 to 03_02_10 Verify Error on Failed Login with invalid credentials')\n    @pytest.mark.parametrize('email, password', [LOGIN[i] for i in [1, 2, 6, 8, 9]])\n    def test_03_02_02_to_10_error_if_login_with_invalid_credentials(self, driver, sign_in_page, email, password):\n        \"\"\"Check error on Failed Login with invalid credentials, case-sensitive password and password with spaces\"\"\"\n>       sign_in_page.fill_in_email_field(email)\n\ntests/test_sign_in.py:271: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/sign_in_page.py:54: in fill_in_email_field\n    self.fill_in_field(self.check_customer_email_field_is_clickable(), email)\npages/base_page.py:319: in fill_in_field\n    input_field.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9b6c01b010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55e92ebe0740 \\\\u003Cunknown>\\\\n#21 0x55e92ebf0196 \\\\u003Cunknown>\\\\n#22 0x7f3bba894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\nE         (Session info: chrome=131.0.6778.85)\nE       Stacktrace:\nE       #0 0x55e92ebf131a <unknown>\nE       #1 0x55e92e7076e0 <unknown>\nE       #2 0x55e92e75d0f6 <unknown>\nE       #3 0x55e92e75b05d <unknown>\nE       #4 0x55e92e758775 <unknown>\nE       #5 0x55e92e75792f <unknown>\nE       #6 0x55e92e74b29a <unknown>\nE       #7 0x55e92e77a462 <unknown>\nE       #8 0x55e92e74aa18 <unknown>\nE       #9 0x55e92e77a62e <unknown>\nE       #10 0x55e92e798ed7 <unknown>\nE       #11 0x55e92e77a203 <unknown>\nE       #12 0x55e92e748cc0 <unknown>\nE       #13 0x55e92e749c9e <unknown>\nE       #14 0x55e92ebbed0b <unknown>\nE       #15 0x55e92ebc2c92 <unknown>\nE       #16 0x55e92ebabb3c <unknown>\nE       #17 0x55e92ebc3807 <unknown>\nE       #18 0x55e92eb910df <unknown>\nE       #19 0x55e92ebe0578 <unknown>\nE       #20 0x55e92ebe0740 <unknown>\nE       #21 0x55e92ebf0196 <unknown>\nE       #22 0x7f3bba894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1733017969452,
      "stop" : 1733017969516,
      "duration" : 64
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "sign_in_page",
    "time" : {
      "start" : 1733019669826,
      "stop" : 1733019671847,
      "duration" : 2021
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Open a browser",
      "time" : {
        "start" : 1733019669826,
        "stop" : 1733019671847,
        "duration" : 2021
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1733019668541,
      "stop" : 1733019669826,
      "duration" : 1285
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "clear_allure_result_folder",
    "time" : {
      "start" : 1733017969516,
      "stop" : 1733017969516,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "Check error on Failed Login with invalid credentials, case-sensitive password and password with spaces",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x55e92ebf131a <unknown>\n#1 0x55e92e7076e0 <unknown>\n#2 0x55e92e75d0f6 <unknown>\n#3 0x55e92e75b05d <unknown>\n#4 0x55e92e758775 <unknown>\n#5 0x55e92e75792f <unknown>\n#6 0x55e92e74b29a <unknown>\n#7 0x55e92e77a462 <unknown>\n#8 0x55e92e74aa18 <unknown>\n#9 0x55e92e77a62e <unknown>\n#10 0x55e92e798ed7 <unknown>\n#11 0x55e92e77a203 <unknown>\n#12 0x55e92e748cc0 <unknown>\n#13 0x55e92e749c9e <unknown>\n#14 0x55e92ebbed0b <unknown>\n#15 0x55e92ebc2c92 <unknown>\n#16 0x55e92ebabb3c <unknown>\n#17 0x55e92ebc3807 <unknown>\n#18 0x55e92eb910df <unknown>\n#19 0x55e92ebe0578 <unknown>\n#20 0x55e92ebe0740 <unknown>\n#21 0x55e92ebf0196 <unknown>\n#22 0x7f3bba894ac3 <unknown>",
    "statusTrace" : "self = <test_sign_in.TestFailedLogin object at 0x7f9b6a956a10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"350e5497d806706e40f0f1d0805e0c5f\")>\nsign_in_page = <pages.sign_in_page.SignInPage object at 0x7f9b6c0185d0>\nemail = 'teston110@mailinator.com', password = 'Test#12p@ssword'\n\n    @allure.title('TC 03.02.02 to 03_02_10 Verify Error on Failed Login with invalid credentials')\n    @pytest.mark.parametrize('email, password', [LOGIN[i] for i in [1, 2, 6, 8, 9]])\n    def test_03_02_02_to_10_error_if_login_with_invalid_credentials(self, driver, sign_in_page, email, password):\n        \"\"\"Check error on Failed Login with invalid credentials, case-sensitive password and password with spaces\"\"\"\n>       sign_in_page.fill_in_email_field(email)\n\ntests/test_sign_in.py:271: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/sign_in_page.py:54: in fill_in_email_field\n    self.fill_in_field(self.check_customer_email_field_is_clickable(), email)\npages/base_page.py:319: in fill_in_field\n    input_field.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9b6c01b010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55e92ebe0740 \\\\u003Cunknown>\\\\n#21 0x55e92ebf0196 \\\\u003Cunknown>\\\\n#22 0x7f3bba894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\nE         (Session info: chrome=131.0.6778.85)\nE       Stacktrace:\nE       #0 0x55e92ebf131a <unknown>\nE       #1 0x55e92e7076e0 <unknown>\nE       #2 0x55e92e75d0f6 <unknown>\nE       #3 0x55e92e75b05d <unknown>\nE       #4 0x55e92e758775 <unknown>\nE       #5 0x55e92e75792f <unknown>\nE       #6 0x55e92e74b29a <unknown>\nE       #7 0x55e92e77a462 <unknown>\nE       #8 0x55e92e74aa18 <unknown>\nE       #9 0x55e92e77a62e <unknown>\nE       #10 0x55e92e798ed7 <unknown>\nE       #11 0x55e92e77a203 <unknown>\nE       #12 0x55e92e748cc0 <unknown>\nE       #13 0x55e92e749c9e <unknown>\nE       #14 0x55e92ebbed0b <unknown>\nE       #15 0x55e92ebc2c92 <unknown>\nE       #16 0x55e92ebabb3c <unknown>\nE       #17 0x55e92ebc3807 <unknown>\nE       #18 0x55e92eb910df <unknown>\nE       #19 0x55e92ebe0578 <unknown>\nE       #20 0x55e92ebe0740 <unknown>\nE       #21 0x55e92ebf0196 <unknown>\nE       #22 0x7f3bba894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "Fill in Email field",
      "time" : {
        "start" : 1733019671848,
        "stop" : 1733019673127,
        "duration" : 1279
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x55e92ebf131a <unknown>\n#1 0x55e92e7076e0 <unknown>\n#2 0x55e92e75d0f6 <unknown>\n#3 0x55e92e75b05d <unknown>\n#4 0x55e92e758775 <unknown>\n#5 0x55e92e75792f <unknown>\n#6 0x55e92e74b29a <unknown>\n#7 0x55e92e77a462 <unknown>\n#8 0x55e92e74aa18 <unknown>\n#9 0x55e92e77a62e <unknown>\n#10 0x55e92e798ed7 <unknown>\n#11 0x55e92e77a203 <unknown>\n#12 0x55e92e748cc0 <unknown>\n#13 0x55e92e749c9e <unknown>\n#14 0x55e92ebbed0b <unknown>\n#15 0x55e92ebc2c92 <unknown>\n#16 0x55e92ebabb3c <unknown>\n#17 0x55e92ebc3807 <unknown>\n#18 0x55e92eb910df <unknown>\n#19 0x55e92ebe0578 <unknown>\n#20 0x55e92ebe0740 <unknown>\n#21 0x55e92ebf0196 <unknown>\n#22 0x7f3bba894ac3 <unknown>\n\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/sign_in_page.py\", line 54, in fill_in_email_field\n    self.fill_in_field(self.check_customer_email_field_is_clickable(), email)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/base_page.py\", line 319, in fill_in_field\n    input_field.click()\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ {
        "name" : "Check Email field is clickable",
        "time" : {
          "start" : 1733019671848,
          "stop" : 1733019671919,
          "duration" : 71
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Find clickable elements",
          "time" : {
            "start" : 1733019671848,
            "stop" : 1733019671919,
            "duration" : 71
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "locator",
            "value" : "('css selector', '#email')"
          }, {
            "name" : "timeout",
            "value" : "5"
          } ],
          "stepsCount" : 0,
          "hasContent" : true,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 1,
        "hasContent" : true,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false
      }, {
        "name" : "Fill in a field",
        "time" : {
          "start" : 1733019671919,
          "stop" : 1733019673127,
          "duration" : 1208
        },
        "status" : "broken",
        "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x55e92ebf131a <unknown>\n#1 0x55e92e7076e0 <unknown>\n#2 0x55e92e75d0f6 <unknown>\n#3 0x55e92e75b05d <unknown>\n#4 0x55e92e758775 <unknown>\n#5 0x55e92e75792f <unknown>\n#6 0x55e92e74b29a <unknown>\n#7 0x55e92e77a462 <unknown>\n#8 0x55e92e74aa18 <unknown>\n#9 0x55e92e77a62e <unknown>\n#10 0x55e92e798ed7 <unknown>\n#11 0x55e92e77a203 <unknown>\n#12 0x55e92e748cc0 <unknown>\n#13 0x55e92e749c9e <unknown>\n#14 0x55e92ebbed0b <unknown>\n#15 0x55e92ebc2c92 <unknown>\n#16 0x55e92ebabb3c <unknown>\n#17 0x55e92ebc3807 <unknown>\n#18 0x55e92eb910df <unknown>\n#19 0x55e92ebe0578 <unknown>\n#20 0x55e92ebe0740 <unknown>\n#21 0x55e92ebf0196 <unknown>\n#22 0x7f3bba894ac3 <unknown>\n\n",
        "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/base_page.py\", line 319, in fill_in_field\n    input_field.click()\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
        "steps" : [ {
          "name" : "Find clickable elements",
          "time" : {
            "start" : 1733019671919,
            "stop" : 1733019671960,
            "duration" : 41
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "locator",
            "value" : "<selenium.webdriver.remote.webelement.WebElement (session=\"350e5497d806706e40f0f1d0805e0c5f\", element=\"f.B7167504A1CADAC8F3A887D9209400F3.d.75250207CFB9F7F5F623FD86581C20AB.e.3\")>"
          }, {
            "name" : "timeout",
            "value" : "5"
          } ],
          "stepsCount" : 0,
          "hasContent" : true,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "locator",
          "value" : "<selenium.webdriver.remote.webelement.WebElement (session=\"350e5497d806706e40f0f1d0805e0c5f\", element=\"f.B7167504A1CADAC8F3A887D9209400F3.d.75250207CFB9F7F5F623FD86581C20AB.e.3\")>"
        }, {
          "name" : "value",
          "value" : "'teston110@mailinator.com'"
        } ],
        "stepsCount" : 1,
        "hasContent" : true,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "email",
        "value" : "'teston110@mailinator.com'"
      } ],
      "stepsCount" : 4,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "77702818d566ed10",
      "name" : "Screenshot",
      "source" : "77702818d566ed10.png",
      "type" : "image/png",
      "size" : 55897
    }, {
      "uid" : "c12a18f2f3e6b415",
      "name" : "HTML source",
      "source" : "c12a18f2f3e6b415.html",
      "type" : "text/html",
      "size" : 107189
    } ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "hasContent" : true,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1733019673267,
      "stop" : 1733019673346,
      "duration" : 79
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "clear_allure_result_folder::0",
    "time" : {
      "start" : 1733019760033,
      "stop" : 1733019760033,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Failed Login Functionality"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_sign_in"
  }, {
    "name" : "subSuite",
    "value" : "TestFailedLogin"
  }, {
    "name" : "host",
    "value" : "fv-az730-633"
  }, {
    "name" : "thread",
    "value" : "2826-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_sign_in"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "email",
    "value" : "'teston110@mailinator.com'"
  }, {
    "name" : "password",
    "value" : "'Test#12p@ssword'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "fa607dbb40b2bdc7.json",
  "parameterValues" : [ "'teston110@mailinator.com'", "'Test#12p@ssword'" ]
}