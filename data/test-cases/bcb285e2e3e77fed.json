{
  "uid" : "bcb285e2e3e77fed",
  "name" : "TC 10.02.03, 10.02.05, 10.02.07, 10.02.09, 10.02.11 - Verify 5 links in Men's Deals open the correct pages",
  "fullName" : "tests.test_sale.TestSideMenuBarMen#test_tc_10_01_03__05_07_09_11_13",
  "historyId" : "c81da95861ccdbcd1b3a998cda96edbb",
  "time" : {
    "start" : 1733019317066,
    "stop" : 1733019318217,
    "duration" : 1151
  },
  "description" : "Check that five links in Men's Deals section lead to the correct pages after click",
  "descriptionHtml" : "<p>Check that five links in Men's Deals section lead to the correct pages after click</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://magento.softwaretestingboard.com/men/bottoms-men/pants-men.html\">...</a> is not clickable at point (340, 851). Other element would receive the click: <div id=\"aswift_5_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x561d7311131a <unknown>\n#1 0x561d72c276e0 <unknown>\n#2 0x561d72c7d0f6 <unknown>\n#3 0x561d72c7b05d <unknown>\n#4 0x561d72c78775 <unknown>\n#5 0x561d72c7792f <unknown>\n#6 0x561d72c6b0d5 <unknown>\n#7 0x561d72c9a462 <unknown>\n#8 0x561d72c6aa18 <unknown>\n#9 0x561d72c9a62e <unknown>\n#10 0x561d72cb8ed7 <unknown>\n#11 0x561d72c9a203 <unknown>\n#12 0x561d72c68cc0 <unknown>\n#13 0x561d72c69c9e <unknown>\n#14 0x561d730ded0b <unknown>\n#15 0x561d730e2c92 <unknown>\n#16 0x561d730cbb3c <unknown>\n#17 0x561d730e3807 <unknown>\n#18 0x561d730b10df <unknown>\n#19 0x561d73100578 <unknown>\n#20 0x561d73100740 <unknown>\n#21 0x561d73110196 <unknown>\n#22 0x7fd8e4294ac3 <unknown>",
  "statusTrace" : "self = <test_sale.TestSalePage.TestSideMenuBarMen object at 0x7f9b6b85a050>\nsale_page = <pages.sale_page.SalePage object at 0x7f9b6bf88450>\nelement_locator = ('css selector', '.categories-menu > ul:nth-child(4) > li:nth-child(4) > a')\nexpected_title = 'Pants - Bottoms - Men'\nexpected_url = 'https://magento.softwaretestingboard.com/men/bottoms-men/pants-men.html'\n\n    @allure.title(\"TC 10.02.03, 10.02.05, 10.02.07, 10.02.09, 10.02.11 - \"\n                  \"Verify 5 links in Men's Deals open the correct pages\")\n    @pytest.mark.parametrize(\n        \"element_locator, expected_title, expected_url\",\n        zip(\n            SideBarLocators.MEN_DEALS_ELEMENTS.values(),\n            expected_titles_m.values(),\n            expected_urls_m.values(),\n        )\n    )\n    def test_tc_10_01_03__05_07_09_11_13(self, sale_page, element_locator, expected_title, expected_url):\n        \"\"\"Check that five links in Men's Deals section lead to the correct pages after click\"\"\"\n        element_in_men_deals = sale_page.element_is_clickable(element_locator)\n>       element_in_men_deals.click()\n\ntests/test_sale.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9b6bf88f10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x561d73100740 \\\\u003Cunknown>\\\\n#21 0x561d73110196 \\\\u003Cunknown>\\\\n#22 0x7fd8e4294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://magento.softwaretestingboard.com/men/bottoms-men/pants-men.html\">...</a> is not clickable at point (340, 851). Other element would receive the click: <div id=\"aswift_5_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\nE         (Session info: chrome=131.0.6778.85)\nE       Stacktrace:\nE       #0 0x561d7311131a <unknown>\nE       #1 0x561d72c276e0 <unknown>\nE       #2 0x561d72c7d0f6 <unknown>\nE       #3 0x561d72c7b05d <unknown>\nE       #4 0x561d72c78775 <unknown>\nE       #5 0x561d72c7792f <unknown>\nE       #6 0x561d72c6b0d5 <unknown>\nE       #7 0x561d72c9a462 <unknown>\nE       #8 0x561d72c6aa18 <unknown>\nE       #9 0x561d72c9a62e <unknown>\nE       #10 0x561d72cb8ed7 <unknown>\nE       #11 0x561d72c9a203 <unknown>\nE       #12 0x561d72c68cc0 <unknown>\nE       #13 0x561d72c69c9e <unknown>\nE       #14 0x561d730ded0b <unknown>\nE       #15 0x561d730e2c92 <unknown>\nE       #16 0x561d730cbb3c <unknown>\nE       #17 0x561d730e3807 <unknown>\nE       #18 0x561d730b10df <unknown>\nE       #19 0x561d73100578 <unknown>\nE       #20 0x561d73100740 <unknown>\nE       #21 0x561d73110196 <unknown>\nE       #22 0x7fd8e4294ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1733017969452,
      "stop" : 1733017969516,
      "duration" : 64
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "sale_page",
    "time" : {
      "start" : 1733019314968,
      "stop" : 1733019317065,
      "duration" : 2097
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Open a browser",
      "time" : {
        "start" : 1733019314968,
        "stop" : 1733019317065,
        "duration" : 2097
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "clear_allure_result_folder",
    "time" : {
      "start" : 1733017969516,
      "stop" : 1733017969516,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1733019313686,
      "stop" : 1733019314968,
      "duration" : 1282
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "Check that five links in Men's Deals section lead to the correct pages after click",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://magento.softwaretestingboard.com/men/bottoms-men/pants-men.html\">...</a> is not clickable at point (340, 851). Other element would receive the click: <div id=\"aswift_5_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x561d7311131a <unknown>\n#1 0x561d72c276e0 <unknown>\n#2 0x561d72c7d0f6 <unknown>\n#3 0x561d72c7b05d <unknown>\n#4 0x561d72c78775 <unknown>\n#5 0x561d72c7792f <unknown>\n#6 0x561d72c6b0d5 <unknown>\n#7 0x561d72c9a462 <unknown>\n#8 0x561d72c6aa18 <unknown>\n#9 0x561d72c9a62e <unknown>\n#10 0x561d72cb8ed7 <unknown>\n#11 0x561d72c9a203 <unknown>\n#12 0x561d72c68cc0 <unknown>\n#13 0x561d72c69c9e <unknown>\n#14 0x561d730ded0b <unknown>\n#15 0x561d730e2c92 <unknown>\n#16 0x561d730cbb3c <unknown>\n#17 0x561d730e3807 <unknown>\n#18 0x561d730b10df <unknown>\n#19 0x561d73100578 <unknown>\n#20 0x561d73100740 <unknown>\n#21 0x561d73110196 <unknown>\n#22 0x7fd8e4294ac3 <unknown>",
    "statusTrace" : "self = <test_sale.TestSalePage.TestSideMenuBarMen object at 0x7f9b6b85a050>\nsale_page = <pages.sale_page.SalePage object at 0x7f9b6bf88450>\nelement_locator = ('css selector', '.categories-menu > ul:nth-child(4) > li:nth-child(4) > a')\nexpected_title = 'Pants - Bottoms - Men'\nexpected_url = 'https://magento.softwaretestingboard.com/men/bottoms-men/pants-men.html'\n\n    @allure.title(\"TC 10.02.03, 10.02.05, 10.02.07, 10.02.09, 10.02.11 - \"\n                  \"Verify 5 links in Men's Deals open the correct pages\")\n    @pytest.mark.parametrize(\n        \"element_locator, expected_title, expected_url\",\n        zip(\n            SideBarLocators.MEN_DEALS_ELEMENTS.values(),\n            expected_titles_m.values(),\n            expected_urls_m.values(),\n        )\n    )\n    def test_tc_10_01_03__05_07_09_11_13(self, sale_page, element_locator, expected_title, expected_url):\n        \"\"\"Check that five links in Men's Deals section lead to the correct pages after click\"\"\"\n        element_in_men_deals = sale_page.element_is_clickable(element_locator)\n>       element_in_men_deals.click()\n\ntests/test_sale.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9b6bf88f10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x561d73100740 \\\\u003Cunknown>\\\\n#21 0x561d73110196 \\\\u003Cunknown>\\\\n#22 0x7fd8e4294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://magento.softwaretestingboard.com/men/bottoms-men/pants-men.html\">...</a> is not clickable at point (340, 851). Other element would receive the click: <div id=\"aswift_5_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\nE         (Session info: chrome=131.0.6778.85)\nE       Stacktrace:\nE       #0 0x561d7311131a <unknown>\nE       #1 0x561d72c276e0 <unknown>\nE       #2 0x561d72c7d0f6 <unknown>\nE       #3 0x561d72c7b05d <unknown>\nE       #4 0x561d72c78775 <unknown>\nE       #5 0x561d72c7792f <unknown>\nE       #6 0x561d72c6b0d5 <unknown>\nE       #7 0x561d72c9a462 <unknown>\nE       #8 0x561d72c6aa18 <unknown>\nE       #9 0x561d72c9a62e <unknown>\nE       #10 0x561d72cb8ed7 <unknown>\nE       #11 0x561d72c9a203 <unknown>\nE       #12 0x561d72c68cc0 <unknown>\nE       #13 0x561d72c69c9e <unknown>\nE       #14 0x561d730ded0b <unknown>\nE       #15 0x561d730e2c92 <unknown>\nE       #16 0x561d730cbb3c <unknown>\nE       #17 0x561d730e3807 <unknown>\nE       #18 0x561d730b10df <unknown>\nE       #19 0x561d73100578 <unknown>\nE       #20 0x561d73100740 <unknown>\nE       #21 0x561d73110196 <unknown>\nE       #22 0x7fd8e4294ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "Find clickable elements",
      "time" : {
        "start" : 1733019317066,
        "stop" : 1733019317108,
        "duration" : 42
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "locator",
        "value" : "('css selector', '.categories-menu > ul:nth-child(4) > li:nth-child(4) > a')"
      }, {
        "name" : "timeout",
        "value" : "5"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "a13563c942f03dda",
      "name" : "Screenshot",
      "source" : "a13563c942f03dda.png",
      "type" : "image/png",
      "size" : 323343
    }, {
      "uid" : "4492c0833875d2ca",
      "name" : "HTML source",
      "source" : "4492c0833875d2ca.html",
      "type" : "text/html",
      "size" : 169736
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "clear_allure_result_folder::0",
    "time" : {
      "start" : 1733019760033,
      "stop" : 1733019760033,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1733019318398,
      "stop" : 1733019318474,
      "duration" : 76
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Sale Page"
  }, {
    "name" : "feature",
    "value" : "Testing Side Menu Bar - Men's Deals Section"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_sale"
  }, {
    "name" : "subSuite",
    "value" : "TestSalePage"
  }, {
    "name" : "host",
    "value" : "fv-az730-633"
  }, {
    "name" : "thread",
    "value" : "2826-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_sale"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "element_locator",
    "value" : "('css selector', '.categories-menu > ul:nth-child(4) > li:nth-child(4) > a')"
  }, {
    "name" : "expected_title",
    "value" : "'Pants - Bottoms - Men'"
  }, {
    "name" : "expected_url",
    "value" : "'https://magento.softwaretestingboard.com/men/bottoms-men/pants-men.html'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "bcb285e2e3e77fed.json",
  "parameterValues" : [ "('css selector', '.categories-menu > ul:nth-child(4) > li:nth-child(4) > a')", "'Pants - Bottoms - Men'", "'https://magento.softwaretestingboard.com/men/bottoms-men/pants-men.html'" ]
}