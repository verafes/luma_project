{
  "uid" : "a65b9eefc8eb36eb",
  "name" : "tc 07.02.08 Verify that 'Proceed to checkout' button redirects to the shipping page",
  "fullName" : "tests.test_shopping_cart.TestShoppingCartFull#test_tc_07_02_08_verify_proceed_to_checkout_button_leads_to_the_shipping_page",
  "historyId" : "9ea104d91506ad7602cf69e28583a223",
  "time" : {
    "start" : 1729389625367,
    "stop" : 1729389626540,
    "duration" : 1173
  },
  "description" : "Verify that the 'Proceed to checkout' button redirects to the shipping page.",
  "descriptionHtml" : "<p>Verify that the 'Proceed to checkout' button redirects to the shipping page.</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <iframe id=\"aswift_5\" name=\"aswift_5\" browsingtopics=\"true\" style=\"width: 1005px !important; height: 124px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"1005\" height=\"124\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20241014/r20190131/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-7399332034053978&amp;fa=1&amp;ifi=6&amp;uci=a!6&amp;btvi=4\" data-google-container-id=\"a!6\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CLDt8LHum4kDFVnBZQMdlAkqUw\" data-load-complete=\"true\"></iframe>\n  (Session info: chrome=130.0.6723.58)\nStacktrace:\n#0 0x5593eb2aa0aa <unknown>\n#1 0x5593eadc11a0 <unknown>\n#2 0x5593eae14896 <unknown>\n#3 0x5593eae1282d <unknown>\n#4 0x5593eae102d7 <unknown>\n#5 0x5593eae0f6f1 <unknown>\n#6 0x5593eae02cf8 <unknown>\n#7 0x5593eae31d82 <unknown>\n#8 0x5593eae026d8 <unknown>\n#9 0x5593eae31f4e <unknown>\n#10 0x5593eae50866 <unknown>\n#11 0x5593eae31b23 <unknown>\n#12 0x5593eae00990 <unknown>\n#13 0x5593eae0196e <unknown>\n#14 0x5593eb27616b <unknown>\n#15 0x5593eb279f68 <unknown>\n#16 0x5593eb26364c <unknown>\n#17 0x5593eb27aae7 <unknown>\n#18 0x5593eb2484af <unknown>\n#19 0x5593eb2984f8 <unknown>\n#20 0x5593eb2986c0 <unknown>\n#21 0x5593eb2a8f26 <unknown>\n#22 0x7f00c7094ac3 <unknown>",
  "statusTrace" : "self = <test_shopping_cart.TestShoppingCartFull object at 0x7f9748734450>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"72cf0c85991bd2799fddba83020a5a2e\")>\nfull_cart_page = None\n\n    @allure.title(\"tc 07.02.08 Verify that 'Proceed to checkout' button redirects to the shipping page\")\n    def test_tc_07_02_08_verify_proceed_to_checkout_button_leads_to_the_shipping_page(self, driver, full_cart_page):\n        \"\"\"Verify that the 'Proceed to checkout' button redirects to the shipping page.\"\"\"\n        page = ShoppingCartPage(driver, SHOPPING_CART_PAGE)\n>       link = page.check_checkout_button_redirects_to_shipping_page()\n\ntests/test_shopping_cart.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/shopping_cart_page.py:113: in check_checkout_button_redirects_to_shipping_page\n    button.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f974a423110>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5593eb2986c0 \\\\u003Cunknown>\\\\n#21 0x5593eb2a8f26 \\\\u003Cunknown>\\\\n#22 0x7f00c7094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <iframe id=\"aswift_5\" name=\"aswift_5\" browsingtopics=\"true\" style=\"width: 1005px !important; height: 124px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"1005\" height=\"124\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20241014/r20190131/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-7399332034053978&amp;fa=1&amp;ifi=6&amp;uci=a!6&amp;btvi=4\" data-google-container-id=\"a!6\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CLDt8LHum4kDFVnBZQMdlAkqUw\" data-load-complete=\"true\"></iframe>\nE         (Session info: chrome=130.0.6723.58)\nE       Stacktrace:\nE       #0 0x5593eb2aa0aa <unknown>\nE       #1 0x5593eadc11a0 <unknown>\nE       #2 0x5593eae14896 <unknown>\nE       #3 0x5593eae1282d <unknown>\nE       #4 0x5593eae102d7 <unknown>\nE       #5 0x5593eae0f6f1 <unknown>\nE       #6 0x5593eae02cf8 <unknown>\nE       #7 0x5593eae31d82 <unknown>\nE       #8 0x5593eae026d8 <unknown>\nE       #9 0x5593eae31f4e <unknown>\nE       #10 0x5593eae50866 <unknown>\nE       #11 0x5593eae31b23 <unknown>\nE       #12 0x5593eae00990 <unknown>\nE       #13 0x5593eae0196e <unknown>\nE       #14 0x5593eb27616b <unknown>\nE       #15 0x5593eb279f68 <unknown>\nE       #16 0x5593eb26364c <unknown>\nE       #17 0x5593eb27aae7 <unknown>\nE       #18 0x5593eb2484af <unknown>\nE       #19 0x5593eb2984f8 <unknown>\nE       #20 0x5593eb2986c0 <unknown>\nE       #21 0x5593eb2a8f26 <unknown>\nE       #22 0x7f00c7094ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_result_folder",
    "time" : {
      "start" : 1729388330700,
      "stop" : 1729388330701,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1729389618515,
      "stop" : 1729389619772,
      "duration" : 1257
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "full_cart_page",
    "time" : {
      "start" : 1729389619772,
      "stop" : 1729389625366,
      "duration" : 5594
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1729388330640,
      "stop" : 1729388330700,
      "duration" : 60
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "Verify that the 'Proceed to checkout' button redirects to the shipping page.",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <iframe id=\"aswift_5\" name=\"aswift_5\" browsingtopics=\"true\" style=\"width: 1005px !important; height: 124px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"1005\" height=\"124\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20241014/r20190131/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-7399332034053978&amp;fa=1&amp;ifi=6&amp;uci=a!6&amp;btvi=4\" data-google-container-id=\"a!6\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CLDt8LHum4kDFVnBZQMdlAkqUw\" data-load-complete=\"true\"></iframe>\n  (Session info: chrome=130.0.6723.58)\nStacktrace:\n#0 0x5593eb2aa0aa <unknown>\n#1 0x5593eadc11a0 <unknown>\n#2 0x5593eae14896 <unknown>\n#3 0x5593eae1282d <unknown>\n#4 0x5593eae102d7 <unknown>\n#5 0x5593eae0f6f1 <unknown>\n#6 0x5593eae02cf8 <unknown>\n#7 0x5593eae31d82 <unknown>\n#8 0x5593eae026d8 <unknown>\n#9 0x5593eae31f4e <unknown>\n#10 0x5593eae50866 <unknown>\n#11 0x5593eae31b23 <unknown>\n#12 0x5593eae00990 <unknown>\n#13 0x5593eae0196e <unknown>\n#14 0x5593eb27616b <unknown>\n#15 0x5593eb279f68 <unknown>\n#16 0x5593eb26364c <unknown>\n#17 0x5593eb27aae7 <unknown>\n#18 0x5593eb2484af <unknown>\n#19 0x5593eb2984f8 <unknown>\n#20 0x5593eb2986c0 <unknown>\n#21 0x5593eb2a8f26 <unknown>\n#22 0x7f00c7094ac3 <unknown>",
    "statusTrace" : "self = <test_shopping_cart.TestShoppingCartFull object at 0x7f9748734450>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"72cf0c85991bd2799fddba83020a5a2e\")>\nfull_cart_page = None\n\n    @allure.title(\"tc 07.02.08 Verify that 'Proceed to checkout' button redirects to the shipping page\")\n    def test_tc_07_02_08_verify_proceed_to_checkout_button_leads_to_the_shipping_page(self, driver, full_cart_page):\n        \"\"\"Verify that the 'Proceed to checkout' button redirects to the shipping page.\"\"\"\n        page = ShoppingCartPage(driver, SHOPPING_CART_PAGE)\n>       link = page.check_checkout_button_redirects_to_shipping_page()\n\ntests/test_shopping_cart.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/shopping_cart_page.py:113: in check_checkout_button_redirects_to_shipping_page\n    button.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f974a423110>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5593eb2986c0 \\\\u003Cunknown>\\\\n#21 0x5593eb2a8f26 \\\\u003Cunknown>\\\\n#22 0x7f00c7094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <iframe id=\"aswift_5\" name=\"aswift_5\" browsingtopics=\"true\" style=\"width: 1005px !important; height: 124px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"1005\" height=\"124\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20241014/r20190131/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-7399332034053978&amp;fa=1&amp;ifi=6&amp;uci=a!6&amp;btvi=4\" data-google-container-id=\"a!6\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CLDt8LHum4kDFVnBZQMdlAkqUw\" data-load-complete=\"true\"></iframe>\nE         (Session info: chrome=130.0.6723.58)\nE       Stacktrace:\nE       #0 0x5593eb2aa0aa <unknown>\nE       #1 0x5593eadc11a0 <unknown>\nE       #2 0x5593eae14896 <unknown>\nE       #3 0x5593eae1282d <unknown>\nE       #4 0x5593eae102d7 <unknown>\nE       #5 0x5593eae0f6f1 <unknown>\nE       #6 0x5593eae02cf8 <unknown>\nE       #7 0x5593eae31d82 <unknown>\nE       #8 0x5593eae026d8 <unknown>\nE       #9 0x5593eae31f4e <unknown>\nE       #10 0x5593eae50866 <unknown>\nE       #11 0x5593eae31b23 <unknown>\nE       #12 0x5593eae00990 <unknown>\nE       #13 0x5593eae0196e <unknown>\nE       #14 0x5593eb27616b <unknown>\nE       #15 0x5593eb279f68 <unknown>\nE       #16 0x5593eb26364c <unknown>\nE       #17 0x5593eb27aae7 <unknown>\nE       #18 0x5593eb2484af <unknown>\nE       #19 0x5593eb2984f8 <unknown>\nE       #20 0x5593eb2986c0 <unknown>\nE       #21 0x5593eb2a8f26 <unknown>\nE       #22 0x7f00c7094ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "Check 'Proceed to checkout' button redirects to the shipping page",
      "time" : {
        "start" : 1729389625367,
        "stop" : 1729389626540,
        "duration" : 1173
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <iframe id=\"aswift_5\" name=\"aswift_5\" browsingtopics=\"true\" style=\"width: 1005px !important; height: 124px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"1005\" height=\"124\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20241014/r20190131/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-7399332034053978&amp;fa=1&amp;ifi=6&amp;uci=a!6&amp;btvi=4\" data-google-container-id=\"a!6\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CLDt8LHum4kDFVnBZQMdlAkqUw\" data-load-complete=\"true\"></iframe>\n  (Session info: chrome=130.0.6723.58)\nStacktrace:\n#0 0x5593eb2aa0aa <unknown>\n#1 0x5593eadc11a0 <unknown>\n#2 0x5593eae14896 <unknown>\n#3 0x5593eae1282d <unknown>\n#4 0x5593eae102d7 <unknown>\n#5 0x5593eae0f6f1 <unknown>\n#6 0x5593eae02cf8 <unknown>\n#7 0x5593eae31d82 <unknown>\n#8 0x5593eae026d8 <unknown>\n#9 0x5593eae31f4e <unknown>\n#10 0x5593eae50866 <unknown>\n#11 0x5593eae31b23 <unknown>\n#12 0x5593eae00990 <unknown>\n#13 0x5593eae0196e <unknown>\n#14 0x5593eb27616b <unknown>\n#15 0x5593eb279f68 <unknown>\n#16 0x5593eb26364c <unknown>\n#17 0x5593eb27aae7 <unknown>\n#18 0x5593eb2484af <unknown>\n#19 0x5593eb2984f8 <unknown>\n#20 0x5593eb2986c0 <unknown>\n#21 0x5593eb2a8f26 <unknown>\n#22 0x7f00c7094ac3 <unknown>\n\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/shopping_cart_page.py\", line 113, in check_checkout_button_redirects_to_shipping_page\n    button.click()\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ {
        "name" : "Find clickable elements",
        "time" : {
          "start" : 1729389625367,
          "stop" : 1729389625425,
          "duration" : 58
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "locator",
          "value" : "('css selector', 'button.action.primary.checkout span')"
        }, {
          "name" : "timeout",
          "value" : "5"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 0
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 1
    } ],
    "attachments" : [ {
      "uid" : "65ea23e135e813b8",
      "name" : "Screenshot",
      "source" : "65ea23e135e813b8.png",
      "type" : "image/png",
      "size" : 406025
    }, {
      "uid" : "57f53add683b7499",
      "name" : "HTML source",
      "source" : "57f53add683b7499.html",
      "type" : "text/html",
      "size" : 249313
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 2
  },
  "afterStages" : [ {
    "name" : "clear_allure_result_folder::0",
    "time" : {
      "start" : 1729389971625,
      "stop" : 1729389971625,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1729389626694,
      "stop" : 1729389626773,
      "duration" : 79
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Shopping Cart is full"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_shopping_cart"
  }, {
    "name" : "subSuite",
    "value" : "TestShoppingCartFull"
  }, {
    "name" : "host",
    "value" : "fv-az1118-588"
  }, {
    "name" : "thread",
    "value" : "2830-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_shopping_cart"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a65b9eefc8eb36eb.json",
  "parameterValues" : [ ]
}