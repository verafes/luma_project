{"uid":"570220f472e394b7","name":"Check the transition to the page my wish after clicking on the button. User is not authorized","fullName":"tests.test_main_page.TestHotSellerSection#test_06_01_17_check_the_transition_to_the_page_my_wish_after_click_on_the_button","historyId":"0a4f97c306f2cceb030ba035cd56202a","time":{"start":1696814623316,"stop":1696814923325,"duration":300009},"description":"\n            This test will check that after clicking on the add to wishlist button,\n            you are redirected to the My Wishlist page\n            User is not authorized\n            ","descriptionHtml":"<pre><code>        This test will check that after clicking on the add to wishlist button,\n        you are redirected to the My Wishlist page\n        User is not authorized\n</code></pre>\n","status":"skipped","statusMessage":"XFAIL In CI, there is no transition to the user registration page, so the test fails\n\nselenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.657\n  (Session info: chrome=117.0.5938.132)\nStacktrace:\n#0 0x5654358cd6b3 <unknown>\n#1 0x5654355a31e7 <unknown>\n#2 0x56543558b1ae <unknown>\n#3 0x56543558afde <unknown>\n#4 0x565435589be4 <unknown>\n#5 0x56543558a1df <unknown>\n#6 0x565435599724 <unknown>\n#7 0x5654355adef1 <unknown>\n#8 0x5654355b28ab <unknown>\n#9 0x56543558a901 <unknown>\n#10 0x5654355adce6 <unknown>\n#11 0x56543562551c <unknown>\n#12 0x56543560be93 <unknown>\n#13 0x5654355de934 <unknown>\n#14 0x5654355df71e <unknown>\n#15 0x565435892cb8 <unknown>\n#16 0x565435896bf0 <unknown>\n#17 0x5654358a119c <unknown>\n#18 0x565435897808 <unknown>\n#19 0x56543586427f <unknown>\n#20 0x5654358bbe88 <unknown>\n#21 0x5654358bc059 <unknown>\n#22 0x5654358cc843 <unknown>\n#23 0x7f2e23494b43 <unknown>","statusTrace":"self = <test_main_page.TestMainPage.TestHotSellerSection object at 0x7f740a034f90>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5b2871293c2baad413423d02184782f0\")>\n\n    @pytest.mark.xfail(reason=\"In CI, there is no transition to the user registration page, so the test fails\")\n    @allure.title(\"Check the transition to the page my wish after clicking on the button. User is not authorized\")\n    def test_06_01_17_check_the_transition_to_the_page_my_wish_after_click_on_the_button(self, driver):\n        \"\"\"\n        This test will check that after clicking on the add to wishlist button,\n        you are redirected to the My Wishlist page\n        User is not authorized\n        \"\"\"\n        page = MainPage(driver, MAIN_PAGE_URL)\n>       page.open()\n\ntests/test_main_page.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:19: in open\n    self.driver.get(self.url)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:355: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f740a7c2590>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#21 0x5654358bc059 \\\\u003Cunknown>\\\\n#22 0x5654358cc843 \\\\u003Cunknown>\\\\n#23 0x7f2e23494b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.657\nE         (Session info: chrome=117.0.5938.132)\nE       Stacktrace:\nE       #0 0x5654358cd6b3 <unknown>\nE       #1 0x5654355a31e7 <unknown>\nE       #2 0x56543558b1ae <unknown>\nE       #3 0x56543558afde <unknown>\nE       #4 0x565435589be4 <unknown>\nE       #5 0x56543558a1df <unknown>\nE       #6 0x565435599724 <unknown>\nE       #7 0x5654355adef1 <unknown>\nE       #8 0x5654355b28ab <unknown>\nE       #9 0x56543558a901 <unknown>\nE       #10 0x5654355adce6 <unknown>\nE       #11 0x56543562551c <unknown>\nE       #12 0x56543560be93 <unknown>\nE       #13 0x5654355de934 <unknown>\nE       #14 0x5654355df71e <unknown>\nE       #15 0x565435892cb8 <unknown>\nE       #16 0x565435896bf0 <unknown>\nE       #17 0x5654358a119c <unknown>\nE       #18 0x565435897808 <unknown>\nE       #19 0x56543586427f <unknown>\nE       #20 0x5654358bbe88 <unknown>\nE       #21 0x5654358bc059 <unknown>\nE       #22 0x5654358cc843 <unknown>\nE       #23 0x7f2e23494b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1696813776601,"stop":1696813776710,"duration":109},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_result_folder","time":{"start":1696813776711,"stop":1696813776711,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1696814622091,"stop":1696814623315,"duration":1224},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n            This test will check that after clicking on the add to wishlist button,\n            you are redirected to the My Wishlist page\n            User is not authorized\n            ","status":"skipped","statusMessage":"XFAIL In CI, there is no transition to the user registration page, so the test fails\n\nselenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.657\n  (Session info: chrome=117.0.5938.132)\nStacktrace:\n#0 0x5654358cd6b3 <unknown>\n#1 0x5654355a31e7 <unknown>\n#2 0x56543558b1ae <unknown>\n#3 0x56543558afde <unknown>\n#4 0x565435589be4 <unknown>\n#5 0x56543558a1df <unknown>\n#6 0x565435599724 <unknown>\n#7 0x5654355adef1 <unknown>\n#8 0x5654355b28ab <unknown>\n#9 0x56543558a901 <unknown>\n#10 0x5654355adce6 <unknown>\n#11 0x56543562551c <unknown>\n#12 0x56543560be93 <unknown>\n#13 0x5654355de934 <unknown>\n#14 0x5654355df71e <unknown>\n#15 0x565435892cb8 <unknown>\n#16 0x565435896bf0 <unknown>\n#17 0x5654358a119c <unknown>\n#18 0x565435897808 <unknown>\n#19 0x56543586427f <unknown>\n#20 0x5654358bbe88 <unknown>\n#21 0x5654358bc059 <unknown>\n#22 0x5654358cc843 <unknown>\n#23 0x7f2e23494b43 <unknown>","statusTrace":"self = <test_main_page.TestMainPage.TestHotSellerSection object at 0x7f740a034f90>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5b2871293c2baad413423d02184782f0\")>\n\n    @pytest.mark.xfail(reason=\"In CI, there is no transition to the user registration page, so the test fails\")\n    @allure.title(\"Check the transition to the page my wish after clicking on the button. User is not authorized\")\n    def test_06_01_17_check_the_transition_to_the_page_my_wish_after_click_on_the_button(self, driver):\n        \"\"\"\n        This test will check that after clicking on the add to wishlist button,\n        you are redirected to the My Wishlist page\n        User is not authorized\n        \"\"\"\n        page = MainPage(driver, MAIN_PAGE_URL)\n>       page.open()\n\ntests/test_main_page.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:19: in open\n    self.driver.get(self.url)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:355: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f740a7c2590>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#21 0x5654358bc059 \\\\u003Cunknown>\\\\n#22 0x5654358cc843 \\\\u003Cunknown>\\\\n#23 0x7f2e23494b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.657\nE         (Session info: chrome=117.0.5938.132)\nE       Stacktrace:\nE       #0 0x5654358cd6b3 <unknown>\nE       #1 0x5654355a31e7 <unknown>\nE       #2 0x56543558b1ae <unknown>\nE       #3 0x56543558afde <unknown>\nE       #4 0x565435589be4 <unknown>\nE       #5 0x56543558a1df <unknown>\nE       #6 0x565435599724 <unknown>\nE       #7 0x5654355adef1 <unknown>\nE       #8 0x5654355b28ab <unknown>\nE       #9 0x56543558a901 <unknown>\nE       #10 0x5654355adce6 <unknown>\nE       #11 0x56543562551c <unknown>\nE       #12 0x56543560be93 <unknown>\nE       #13 0x5654355de934 <unknown>\nE       #14 0x5654355df71e <unknown>\nE       #15 0x565435892cb8 <unknown>\nE       #16 0x565435896bf0 <unknown>\nE       #17 0x5654358a119c <unknown>\nE       #18 0x565435897808 <unknown>\nE       #19 0x56543586427f <unknown>\nE       #20 0x5654358bbe88 <unknown>\nE       #21 0x5654358bc059 <unknown>\nE       #22 0x5654358cc843 <unknown>\nE       #23 0x7f2e23494b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: TimeoutException","steps":[{"name":"Open a browser","time":{"start":1696814623316,"stop":1696814923324,"duration":300008},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.657\n  (Session info: chrome=117.0.5938.132)\nStacktrace:\n#0 0x5654358cd6b3 <unknown>\n#1 0x5654355a31e7 <unknown>\n#2 0x56543558b1ae <unknown>\n#3 0x56543558afde <unknown>\n#4 0x565435589be4 <unknown>\n#5 0x56543558a1df <unknown>\n#6 0x565435599724 <unknown>\n#7 0x5654355adef1 <unknown>\n#8 0x5654355b28ab <unknown>\n#9 0x56543558a901 <unknown>\n#10 0x5654355adce6 <unknown>\n#11 0x56543562551c <unknown>\n#12 0x56543560be93 <unknown>\n#13 0x5654355de934 <unknown>\n#14 0x5654355df71e <unknown>\n#15 0x565435892cb8 <unknown>\n#16 0x565435896bf0 <unknown>\n#17 0x5654358a119c <unknown>\n#18 0x565435897808 <unknown>\n#19 0x56543586427f <unknown>\n#20 0x5654358bbe88 <unknown>\n#21 0x5654358bc059 <unknown>\n#22 0x5654358cc843 <unknown>\n#23 0x7f2e23494b43 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/base_page.py\", line 19, in open\n    self.driver.get(self.url)\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 355, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"980f95afad9aa1ad","name":"Screenshot","source":"980f95afad9aa1ad.png","type":"image/png","size":667134},{"uid":"5418151e6091671f","name":"HTML source","source":"5418151e6091671f.html","type":"text/html","size":102867}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1696814923857,"stop":1696814923939,"duration":82},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_result_folder::0","time":{"start":1696815828491,"stop":1696815828491,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Main Page"},{"name":"feature","value":"Testing Hot Seller Section"},{"name":"tag","value":"@pytest.mark.xfail(reason='In CI, there is no transition to the user registration page, so the test fails')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_main_page"},{"name":"subSuite","value":"TestMainPage"},{"name":"host","value":"fv-az256-664"},{"name":"thread","value":"2922-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_main_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":1,"passed":1,"unknown":0,"total":2},"items":[{"uid":"81a325127ccd48c6","reportUrl":"https://verafes.github.io/luma_project/91//#testresult/81a325127ccd48c6","status":"passed","statusDetails":"XPASS In CI, there is no transition to the user registration page, so the test fails","time":{"start":1696728342795,"stop":1696728346315,"duration":3520}}]},"tags":["@pytest.mark.xfail(reason='In CI, there is no transition to the user registration page, so the test fails')"]},"source":"570220f472e394b7.json","parameterValues":[]}