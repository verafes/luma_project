{"uid":"afef28bc7f76f432","name":"TC 02.03.01 - Check correct transfers by clicking on links in the footer","fullName":"tests.test_footer.TestFooter#test_tc_02_03_01_check_correct_transfers_by_clicking_on_links_in_the_footer","historyId":"d14653777b50b2939baad14d15279ecb","time":{"start":1707786927524,"stop":1707786928552,"duration":1028},"description":"Check that transfers between pages by clicking on links in the footer are correct","descriptionHtml":"<p>Check that transfers between pages by clicking on links in the footer are correct</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n#0 0x5622a8e42d93 <unknown>\n#1 0x5622a8b26337 <unknown>\n#2 0x5622a8b731b9 <unknown>\n#3 0x5622a8b666b7 <unknown>\n#4 0x5622a8b94442 <unknown>\n#5 0x5622a8b66028 <unknown>\n#6 0x5622a8b9460e <unknown>\n#7 0x5622a8bb312d <unknown>\n#8 0x5622a8b941e3 <unknown>\n#9 0x5622a8b64135 <unknown>\n#10 0x5622a8b6513e <unknown>\n#11 0x5622a8e06e4b <unknown>\n#12 0x5622a8e0adfa <unknown>\n#13 0x5622a8df36d5 <unknown>\n#14 0x5622a8e0ba6f <unknown>\n#15 0x5622a8dd769f <unknown>\n#16 0x5622a8e30098 <unknown>\n#17 0x5622a8e30262 <unknown>\n#18 0x5622a8e41f34 <unknown>\n#19 0x7f4ffc094ac3 <unknown>","statusTrace":"self = <test_footer.TestFooter object at 0x7f47c7289fd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d08f1211a082662603e62ce708c08ca\")>\n\n    @allure.title(\"TC 02.03.01 - Check correct transfers by clicking on links in the footer\")\n    def test_tc_02_03_01_check_correct_transfers_by_clicking_on_links_in_the_footer(self, driver):\n        \"\"\"Check that transfers between pages by clicking on links in the footer are correct\"\"\"\n        page = FooterPage(driver, MAIN_PAGE_URL)\n        page.open()\n>       page.check_search_terms_link_functionality()\n\ntests/test_footer.py:592: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/footer_page.py:279: in check_search_terms_link_functionality\n    link_functionality = search_terms_link.click()\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f47c71fc5d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: element ha...\\\\n#17 0x5622a8e30262 \\\\u003Cunknown>\\\\n#18 0x5622a8e41f34 \\\\u003Cunknown>\\\\n#19 0x7f4ffc094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\nE         (Session info: chrome=121.0.6167.139)\nE       Stacktrace:\nE       #0 0x5622a8e42d93 <unknown>\nE       #1 0x5622a8b26337 <unknown>\nE       #2 0x5622a8b731b9 <unknown>\nE       #3 0x5622a8b666b7 <unknown>\nE       #4 0x5622a8b94442 <unknown>\nE       #5 0x5622a8b66028 <unknown>\nE       #6 0x5622a8b9460e <unknown>\nE       #7 0x5622a8bb312d <unknown>\nE       #8 0x5622a8b941e3 <unknown>\nE       #9 0x5622a8b64135 <unknown>\nE       #10 0x5622a8b6513e <unknown>\nE       #11 0x5622a8e06e4b <unknown>\nE       #12 0x5622a8e0adfa <unknown>\nE       #13 0x5622a8df36d5 <unknown>\nE       #14 0x5622a8e0ba6f <unknown>\nE       #15 0x5622a8dd769f <unknown>\nE       #16 0x5622a8e30098 <unknown>\nE       #17 0x5622a8e30262 <unknown>\nE       #18 0x5622a8e41f34 <unknown>\nE       #19 0x7f4ffc094ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1707786532703,"stop":1707786532765,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder","time":{"start":1707786532765,"stop":1707786532765,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1707786926570,"stop":1707786927524,"duration":954},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Check that transfers between pages by clicking on links in the footer are correct","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n#0 0x5622a8e42d93 <unknown>\n#1 0x5622a8b26337 <unknown>\n#2 0x5622a8b731b9 <unknown>\n#3 0x5622a8b666b7 <unknown>\n#4 0x5622a8b94442 <unknown>\n#5 0x5622a8b66028 <unknown>\n#6 0x5622a8b9460e <unknown>\n#7 0x5622a8bb312d <unknown>\n#8 0x5622a8b941e3 <unknown>\n#9 0x5622a8b64135 <unknown>\n#10 0x5622a8b6513e <unknown>\n#11 0x5622a8e06e4b <unknown>\n#12 0x5622a8e0adfa <unknown>\n#13 0x5622a8df36d5 <unknown>\n#14 0x5622a8e0ba6f <unknown>\n#15 0x5622a8dd769f <unknown>\n#16 0x5622a8e30098 <unknown>\n#17 0x5622a8e30262 <unknown>\n#18 0x5622a8e41f34 <unknown>\n#19 0x7f4ffc094ac3 <unknown>","statusTrace":"self = <test_footer.TestFooter object at 0x7f47c7289fd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d08f1211a082662603e62ce708c08ca\")>\n\n    @allure.title(\"TC 02.03.01 - Check correct transfers by clicking on links in the footer\")\n    def test_tc_02_03_01_check_correct_transfers_by_clicking_on_links_in_the_footer(self, driver):\n        \"\"\"Check that transfers between pages by clicking on links in the footer are correct\"\"\"\n        page = FooterPage(driver, MAIN_PAGE_URL)\n        page.open()\n>       page.check_search_terms_link_functionality()\n\ntests/test_footer.py:592: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/footer_page.py:279: in check_search_terms_link_functionality\n    link_functionality = search_terms_link.click()\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f47c71fc5d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: element ha...\\\\n#17 0x5622a8e30262 \\\\u003Cunknown>\\\\n#18 0x5622a8e41f34 \\\\u003Cunknown>\\\\n#19 0x7f4ffc094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\nE         (Session info: chrome=121.0.6167.139)\nE       Stacktrace:\nE       #0 0x5622a8e42d93 <unknown>\nE       #1 0x5622a8b26337 <unknown>\nE       #2 0x5622a8b731b9 <unknown>\nE       #3 0x5622a8b666b7 <unknown>\nE       #4 0x5622a8b94442 <unknown>\nE       #5 0x5622a8b66028 <unknown>\nE       #6 0x5622a8b9460e <unknown>\nE       #7 0x5622a8bb312d <unknown>\nE       #8 0x5622a8b941e3 <unknown>\nE       #9 0x5622a8b64135 <unknown>\nE       #10 0x5622a8b6513e <unknown>\nE       #11 0x5622a8e06e4b <unknown>\nE       #12 0x5622a8e0adfa <unknown>\nE       #13 0x5622a8df36d5 <unknown>\nE       #14 0x5622a8e0ba6f <unknown>\nE       #15 0x5622a8dd769f <unknown>\nE       #16 0x5622a8e30098 <unknown>\nE       #17 0x5622a8e30262 <unknown>\nE       #18 0x5622a8e41f34 <unknown>\nE       #19 0x7f4ffc094ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Open a browser","time":{"start":1707786927524,"stop":1707786928495,"duration":971},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Check Search Terms link leads to the correct page","time":{"start":1707786928495,"stop":1707786928552,"duration":57},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n#0 0x5622a8e42d93 <unknown>\n#1 0x5622a8b26337 <unknown>\n#2 0x5622a8b731b9 <unknown>\n#3 0x5622a8b666b7 <unknown>\n#4 0x5622a8b94442 <unknown>\n#5 0x5622a8b66028 <unknown>\n#6 0x5622a8b9460e <unknown>\n#7 0x5622a8bb312d <unknown>\n#8 0x5622a8b941e3 <unknown>\n#9 0x5622a8b64135 <unknown>\n#10 0x5622a8b6513e <unknown>\n#11 0x5622a8e06e4b <unknown>\n#12 0x5622a8e0adfa <unknown>\n#13 0x5622a8df36d5 <unknown>\n#14 0x5622a8e0ba6f <unknown>\n#15 0x5622a8dd769f <unknown>\n#16 0x5622a8e30098 <unknown>\n#17 0x5622a8e30262 <unknown>\n#18 0x5622a8e41f34 <unknown>\n#19 0x7f4ffc094ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/footer_page.py\", line 279, in check_search_terms_link_functionality\n    link_functionality = search_terms_link.click()\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Find a visible element","time":{"start":1707786928495,"stop":1707786928532,"duration":37},"status":"passed","steps":[{"name":"Find a present element","time":{"start":1707786928495,"stop":1707786928505,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', '.footer > :nth-child(1) > a')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Go to specified element","time":{"start":1707786928505,"stop":1707786928510,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"9d08f1211a082662603e62ce708c08ca\", element=\"1E82F2B88B4ABF4A900A12493F6BA14C_element_54\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', '.footer > :nth-child(1) > a')"},{"name":"timeout","value":"10"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"81058ad5cd7f3617","name":"Screenshot","source":"81058ad5cd7f3617.png","type":"image/png","size":88644},{"uid":"fbfcc4b2da0941ca","name":"HTML source","source":"fbfcc4b2da0941ca.html","type":"text/html","size":117752}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1707786928711,"stop":1707786928778,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder::0","time":{"start":1707788145199,"stop":1707788145200,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Test Footer"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_footer"},{"name":"subSuite","value":"TestFooter"},{"name":"host","value":"fv-az1269-622"},{"name":"thread","value":"2945-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_footer"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"885529f1c852d55f","reportUrl":"https://verafes.github.io/luma_project/218//#testresult/885529f1c852d55f","status":"broken","statusDetails":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n#0 0x561c01bd8d93 <unknown>\n#1 0x561c018bc337 <unknown>\n#2 0x561c019091b9 <unknown>\n#3 0x561c018fc6b7 <unknown>\n#4 0x561c0192a442 <unknown>\n#5 0x561c018fc028 <unknown>\n#6 0x561c0192a60e <unknown>\n#7 0x561c0194912d <unknown>\n#8 0x561c0192a1e3 <unknown>\n#9 0x561c018fa135 <unknown>\n#10 0x561c018fb13e <unknown>\n#11 0x561c01b9ce4b <unknown>\n#12 0x561c01ba0dfa <unknown>\n#13 0x561c01b896d5 <unknown>\n#14 0x561c01ba1a6f <unknown>\n#15 0x561c01b6d69f <unknown>\n#16 0x561c01bc6098 <unknown>\n#17 0x561c01bc6262 <unknown>\n#18 0x561c01bd7f34 <unknown>\n#19 0x7fc418c94ac3 <unknown>","time":{"start":1707700470511,"stop":1707700471339,"duration":828}},{"uid":"ba21c78f624bf251","reportUrl":"https://verafes.github.io/luma_project/217//#testresult/ba21c78f624bf251","status":"broken","statusDetails":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n#0 0x55c0eb7b6d93 <unknown>\n#1 0x55c0eb49a337 <unknown>\n#2 0x55c0eb4e71b9 <unknown>\n#3 0x55c0eb4da6b7 <unknown>\n#4 0x55c0eb508442 <unknown>\n#5 0x55c0eb4da028 <unknown>\n#6 0x55c0eb50860e <unknown>\n#7 0x55c0eb52712d <unknown>\n#8 0x55c0eb5081e3 <unknown>\n#9 0x55c0eb4d8135 <unknown>\n#10 0x55c0eb4d913e <unknown>\n#11 0x55c0eb77ae4b <unknown>\n#12 0x55c0eb77edfa <unknown>\n#13 0x55c0eb7676d5 <unknown>\n#14 0x55c0eb77fa6f <unknown>\n#15 0x55c0eb74b69f <unknown>\n#16 0x55c0eb7a4098 <unknown>\n#17 0x55c0eb7a4262 <unknown>\n#18 0x55c0eb7b5f34 <unknown>\n#19 0x7f8c7da94ac3 <unknown>","time":{"start":1707614356869,"stop":1707614357778,"duration":909}}]},"tags":[]},"source":"afef28bc7f76f432.json","parameterValues":[]}