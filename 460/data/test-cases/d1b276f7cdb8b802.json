{"uid":"d1b276f7cdb8b802","name":"test_tc_06_01_10_check_the_cursor_change_to_cart_button[add_to_wish_list]","fullName":"tests.test_main_page.TestHotSellerSection#test_tc_06_01_10_check_the_cursor_change_to_cart_button","historyId":"8e0856c7af4ac903c700b38539bc30ab","time":{"start":1728611262104,"stop":1728611562122,"duration":300018},"description":"This test check the cursor change when hovering over the cart buttons","descriptionHtml":"<p>This test check the cursor change when hovering over the cart buttons</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.696\n  (Session info: chrome=129.0.6668.89)\nStacktrace:\n#0 0x55cd8ec5302a <unknown>\n#1 0x55cd8e9395e0 <unknown>\n#2 0x55cd8e921733 <unknown>\n#3 0x55cd8e921422 <unknown>\n#4 0x55cd8e91f493 <unknown>\n#5 0x55cd8e91fc4f <unknown>\n#6 0x55cd8e92f667 <unknown>\n#7 0x55cd8e9459b4 <unknown>\n#8 0x55cd8e94adfb <unknown>\n#9 0x55cd8e92035e <unknown>\n#10 0x55cd8e94580f <unknown>\n#11 0x55cd8e9ccfe2 <unknown>\n#12 0x55cd8e9ad8c3 <unknown>\n#13 0x55cd8e97b6b3 <unknown>\n#14 0x55cd8e97c68e <unknown>\n#15 0x55cd8ec1da2b <unknown>\n#16 0x55cd8ec219b1 <unknown>\n#17 0x55cd8ec0a225 <unknown>\n#18 0x55cd8ec22532 <unknown>\n#19 0x55cd8ebef38f <unknown>\n#20 0x55cd8ec41f28 <unknown>\n#21 0x55cd8ec420f3 <unknown>\n#22 0x55cd8ec51e7c <unknown>\n#23 0x7f0c2e094ac3 <unknown>","statusTrace":"self = <test_main_page.TestMainPage.TestHotSellerSection object at 0x7f2340769a10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8e85ab570883267a95569c7173453f90\")>\nitem = 'add_to_wish_list'\n\n    @pytest.mark.parametrize(\"item\", product_card_button)\n    def test_tc_06_01_10_check_the_cursor_change_to_cart_button(self, driver, item):\n        \"\"\"This test check the cursor change when hovering over the cart buttons\"\"\"\n        page = MainPage(driver, MAIN_PAGE_URL)\n>       page.open()\n\ntests/test_main_page.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:19: in open\n    self.driver.get(self.url)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2342475d50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#21 0x55cd8ec420f3 \\\\u003Cunknown>\\\\n#22 0x55cd8ec51e7c \\\\u003Cunknown>\\\\n#23 0x7f0c2e094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.696\nE         (Session info: chrome=129.0.6668.89)\nE       Stacktrace:\nE       #0 0x55cd8ec5302a <unknown>\nE       #1 0x55cd8e9395e0 <unknown>\nE       #2 0x55cd8e921733 <unknown>\nE       #3 0x55cd8e921422 <unknown>\nE       #4 0x55cd8e91f493 <unknown>\nE       #5 0x55cd8e91fc4f <unknown>\nE       #6 0x55cd8e92f667 <unknown>\nE       #7 0x55cd8e9459b4 <unknown>\nE       #8 0x55cd8e94adfb <unknown>\nE       #9 0x55cd8e92035e <unknown>\nE       #10 0x55cd8e94580f <unknown>\nE       #11 0x55cd8e9ccfe2 <unknown>\nE       #12 0x55cd8e9ad8c3 <unknown>\nE       #13 0x55cd8e97b6b3 <unknown>\nE       #14 0x55cd8e97c68e <unknown>\nE       #15 0x55cd8ec1da2b <unknown>\nE       #16 0x55cd8ec219b1 <unknown>\nE       #17 0x55cd8ec0a225 <unknown>\nE       #18 0x55cd8ec22532 <unknown>\nE       #19 0x55cd8ebef38f <unknown>\nE       #20 0x55cd8ec41f28 <unknown>\nE       #21 0x55cd8ec420f3 <unknown>\nE       #22 0x55cd8ec51e7c <unknown>\nE       #23 0x7f0c2e094ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1728610620743,"stop":1728610620809,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder","time":{"start":1728610620809,"stop":1728610620809,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1728611260910,"stop":1728611262103,"duration":1193},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"This test check the cursor change when hovering over the cart buttons","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.696\n  (Session info: chrome=129.0.6668.89)\nStacktrace:\n#0 0x55cd8ec5302a <unknown>\n#1 0x55cd8e9395e0 <unknown>\n#2 0x55cd8e921733 <unknown>\n#3 0x55cd8e921422 <unknown>\n#4 0x55cd8e91f493 <unknown>\n#5 0x55cd8e91fc4f <unknown>\n#6 0x55cd8e92f667 <unknown>\n#7 0x55cd8e9459b4 <unknown>\n#8 0x55cd8e94adfb <unknown>\n#9 0x55cd8e92035e <unknown>\n#10 0x55cd8e94580f <unknown>\n#11 0x55cd8e9ccfe2 <unknown>\n#12 0x55cd8e9ad8c3 <unknown>\n#13 0x55cd8e97b6b3 <unknown>\n#14 0x55cd8e97c68e <unknown>\n#15 0x55cd8ec1da2b <unknown>\n#16 0x55cd8ec219b1 <unknown>\n#17 0x55cd8ec0a225 <unknown>\n#18 0x55cd8ec22532 <unknown>\n#19 0x55cd8ebef38f <unknown>\n#20 0x55cd8ec41f28 <unknown>\n#21 0x55cd8ec420f3 <unknown>\n#22 0x55cd8ec51e7c <unknown>\n#23 0x7f0c2e094ac3 <unknown>","statusTrace":"self = <test_main_page.TestMainPage.TestHotSellerSection object at 0x7f2340769a10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8e85ab570883267a95569c7173453f90\")>\nitem = 'add_to_wish_list'\n\n    @pytest.mark.parametrize(\"item\", product_card_button)\n    def test_tc_06_01_10_check_the_cursor_change_to_cart_button(self, driver, item):\n        \"\"\"This test check the cursor change when hovering over the cart buttons\"\"\"\n        page = MainPage(driver, MAIN_PAGE_URL)\n>       page.open()\n\ntests/test_main_page.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:19: in open\n    self.driver.get(self.url)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2342475d50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#21 0x55cd8ec420f3 \\\\u003Cunknown>\\\\n#22 0x55cd8ec51e7c \\\\u003Cunknown>\\\\n#23 0x7f0c2e094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.696\nE         (Session info: chrome=129.0.6668.89)\nE       Stacktrace:\nE       #0 0x55cd8ec5302a <unknown>\nE       #1 0x55cd8e9395e0 <unknown>\nE       #2 0x55cd8e921733 <unknown>\nE       #3 0x55cd8e921422 <unknown>\nE       #4 0x55cd8e91f493 <unknown>\nE       #5 0x55cd8e91fc4f <unknown>\nE       #6 0x55cd8e92f667 <unknown>\nE       #7 0x55cd8e9459b4 <unknown>\nE       #8 0x55cd8e94adfb <unknown>\nE       #9 0x55cd8e92035e <unknown>\nE       #10 0x55cd8e94580f <unknown>\nE       #11 0x55cd8e9ccfe2 <unknown>\nE       #12 0x55cd8e9ad8c3 <unknown>\nE       #13 0x55cd8e97b6b3 <unknown>\nE       #14 0x55cd8e97c68e <unknown>\nE       #15 0x55cd8ec1da2b <unknown>\nE       #16 0x55cd8ec219b1 <unknown>\nE       #17 0x55cd8ec0a225 <unknown>\nE       #18 0x55cd8ec22532 <unknown>\nE       #19 0x55cd8ebef38f <unknown>\nE       #20 0x55cd8ec41f28 <unknown>\nE       #21 0x55cd8ec420f3 <unknown>\nE       #22 0x55cd8ec51e7c <unknown>\nE       #23 0x7f0c2e094ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[{"name":"Open a browser","time":{"start":1728611262104,"stop":1728611562121,"duration":300017},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.696\n  (Session info: chrome=129.0.6668.89)\nStacktrace:\n#0 0x55cd8ec5302a <unknown>\n#1 0x55cd8e9395e0 <unknown>\n#2 0x55cd8e921733 <unknown>\n#3 0x55cd8e921422 <unknown>\n#4 0x55cd8e91f493 <unknown>\n#5 0x55cd8e91fc4f <unknown>\n#6 0x55cd8e92f667 <unknown>\n#7 0x55cd8e9459b4 <unknown>\n#8 0x55cd8e94adfb <unknown>\n#9 0x55cd8e92035e <unknown>\n#10 0x55cd8e94580f <unknown>\n#11 0x55cd8e9ccfe2 <unknown>\n#12 0x55cd8e9ad8c3 <unknown>\n#13 0x55cd8e97b6b3 <unknown>\n#14 0x55cd8e97c68e <unknown>\n#15 0x55cd8ec1da2b <unknown>\n#16 0x55cd8ec219b1 <unknown>\n#17 0x55cd8ec0a225 <unknown>\n#18 0x55cd8ec22532 <unknown>\n#19 0x55cd8ebef38f <unknown>\n#20 0x55cd8ec41f28 <unknown>\n#21 0x55cd8ec420f3 <unknown>\n#22 0x55cd8ec51e7c <unknown>\n#23 0x7f0c2e094ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/base_page.py\", line 19, in open\n    self.driver.get(self.url)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 353, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1728611862168,"stop":1728611862272,"duration":104},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder::0","time":{"start":1728612888791,"stop":1728612888791,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Main Page"},{"name":"feature","value":"Testing Hot Seller Section"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_main_page"},{"name":"subSuite","value":"TestMainPage"},{"name":"host","value":"fv-az774-794"},{"name":"thread","value":"2937-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_main_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"item","value":"'add_to_wish_list'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":5,"unknown":0,"total":6},"items":[{"uid":"2ba81962681adc4b","reportUrl":"https://verafes.github.io/luma_project/459//#testresult/2ba81962681adc4b","status":"passed","time":{"start":1728524943588,"stop":1728524945985,"duration":2397}},{"uid":"c651390596554276","reportUrl":"https://verafes.github.io/luma_project/458//#testresult/c651390596554276","status":"passed","time":{"start":1728438314492,"stop":1728438315552,"duration":1060}},{"uid":"f04a9063fcc79b2d","reportUrl":"https://verafes.github.io/luma_project/457//#testresult/f04a9063fcc79b2d","status":"passed","time":{"start":1728351928714,"stop":1728351929729,"duration":1015}},{"uid":"289aefbc336a4451","reportUrl":"https://verafes.github.io/luma_project/456//#testresult/289aefbc336a4451","status":"passed","time":{"start":1728265660354,"stop":1728265661274,"duration":920}},{"uid":"78fe428faceeb563","reportUrl":"https://verafes.github.io/luma_project/455//#testresult/78fe428faceeb563","status":"passed","time":{"start":1728179416055,"stop":1728179416926,"duration":871}}]},"tags":[]},"source":"d1b276f7cdb8b802.json","parameterValues":["'add_to_wish_list'"]}