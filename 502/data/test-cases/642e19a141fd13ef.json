{"uid":"642e19a141fd13ef","name":"test_TC_11_01_05","fullName":"tests.test_gear.TestGearPage#test_TC_11_01_05","historyId":"7d5500f43f04ab501b459428d2c0b979","time":{"start":1732240115443,"stop":1732240417447,"duration":302004},"description":"Check that fitness_equipment link is correct","descriptionHtml":"<p>Check that fitness_equipment link is correct</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=131.0.6778.69)\nStacktrace:\n#0 0x55f49285d4ca <unknown>\n#1 0x55f492370620 <unknown>\n#2 0x55f492358907 <unknown>\n#3 0x55f4923585de <unknown>\n#4 0x55f492356616 <unknown>\n#5 0x55f492356dff <unknown>\n#6 0x55f492366687 <unknown>\n#7 0x55f49237d4a4 <unknown>\n#8 0x55f49238332b <unknown>\n#9 0x55f492357507 <unknown>\n#10 0x55f49237d304 <unknown>\n#11 0x55f49240215f <unknown>\n#12 0x55f4923e3113 <unknown>\n#13 0x55f4923b1be0 <unknown>\n#14 0x55f4923b2bbe <unknown>\n#15 0x55f492829e4b <unknown>\n#16 0x55f49282dde2 <unknown>\n#17 0x55f492816d2c <unknown>\n#18 0x55f49282e957 <unknown>\n#19 0x55f4927fc4bf <unknown>\n#20 0x55f49284c348 <unknown>\n#21 0x55f49284c510 <unknown>\n#22 0x55f49285c346 <unknown>\n#23 0x7f1ed1a94ac3 <unknown>","statusTrace":"self = <test_gear.TestGearPage object at 0x7fe14a27f050>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"af8b95b2cd5978010b4fcf8778bf31fc\")>\n\n    def test_TC_11_01_05(self, driver):\n        \"\"\"Check that fitness_equipment link is correct\"\"\"\n        page = GearPage(driver, GEAR_PAGE_URL)\n        page.open()\n>       page.check_fitness_equipment_functionality()\n\ntests/test_gear.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/gear_page_.py:34: in check_fitness_equipment_functionality\n    link = fitness_equipment.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe14835c2d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55f49284c510 \\\\u003Cunknown>\\\\n#22 0x55f49285c346 \\\\u003Cunknown>\\\\n#23 0x7f1ed1a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=131.0.6778.69)\nE       Stacktrace:\nE       #0 0x55f49285d4ca <unknown>\nE       #1 0x55f492370620 <unknown>\nE       #2 0x55f492358907 <unknown>\nE       #3 0x55f4923585de <unknown>\nE       #4 0x55f492356616 <unknown>\nE       #5 0x55f492356dff <unknown>\nE       #6 0x55f492366687 <unknown>\nE       #7 0x55f49237d4a4 <unknown>\nE       #8 0x55f49238332b <unknown>\nE       #9 0x55f492357507 <unknown>\nE       #10 0x55f49237d304 <unknown>\nE       #11 0x55f49240215f <unknown>\nE       #12 0x55f4923e3113 <unknown>\nE       #13 0x55f4923b1be0 <unknown>\nE       #14 0x55f4923b2bbe <unknown>\nE       #15 0x55f492829e4b <unknown>\nE       #16 0x55f49282dde2 <unknown>\nE       #17 0x55f492816d2c <unknown>\nE       #18 0x55f49282e957 <unknown>\nE       #19 0x55f4927fc4bf <unknown>\nE       #20 0x55f49284c348 <unknown>\nE       #21 0x55f49284c510 <unknown>\nE       #22 0x55f49285c346 <unknown>\nE       #23 0x7f1ed1a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732239774372,"stop":1732239774435,"duration":63},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder","time":{"start":1732239774435,"stop":1732239774435,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732240114241,"stop":1732240115443,"duration":1202},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Check that fitness_equipment link is correct","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=131.0.6778.69)\nStacktrace:\n#0 0x55f49285d4ca <unknown>\n#1 0x55f492370620 <unknown>\n#2 0x55f492358907 <unknown>\n#3 0x55f4923585de <unknown>\n#4 0x55f492356616 <unknown>\n#5 0x55f492356dff <unknown>\n#6 0x55f492366687 <unknown>\n#7 0x55f49237d4a4 <unknown>\n#8 0x55f49238332b <unknown>\n#9 0x55f492357507 <unknown>\n#10 0x55f49237d304 <unknown>\n#11 0x55f49240215f <unknown>\n#12 0x55f4923e3113 <unknown>\n#13 0x55f4923b1be0 <unknown>\n#14 0x55f4923b2bbe <unknown>\n#15 0x55f492829e4b <unknown>\n#16 0x55f49282dde2 <unknown>\n#17 0x55f492816d2c <unknown>\n#18 0x55f49282e957 <unknown>\n#19 0x55f4927fc4bf <unknown>\n#20 0x55f49284c348 <unknown>\n#21 0x55f49284c510 <unknown>\n#22 0x55f49285c346 <unknown>\n#23 0x7f1ed1a94ac3 <unknown>","statusTrace":"self = <test_gear.TestGearPage object at 0x7fe14a27f050>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"af8b95b2cd5978010b4fcf8778bf31fc\")>\n\n    def test_TC_11_01_05(self, driver):\n        \"\"\"Check that fitness_equipment link is correct\"\"\"\n        page = GearPage(driver, GEAR_PAGE_URL)\n        page.open()\n>       page.check_fitness_equipment_functionality()\n\ntests/test_gear.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/gear_page_.py:34: in check_fitness_equipment_functionality\n    link = fitness_equipment.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe14835c2d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55f49284c510 \\\\u003Cunknown>\\\\n#22 0x55f49285c346 \\\\u003Cunknown>\\\\n#23 0x7f1ed1a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=131.0.6778.69)\nE       Stacktrace:\nE       #0 0x55f49285d4ca <unknown>\nE       #1 0x55f492370620 <unknown>\nE       #2 0x55f492358907 <unknown>\nE       #3 0x55f4923585de <unknown>\nE       #4 0x55f492356616 <unknown>\nE       #5 0x55f492356dff <unknown>\nE       #6 0x55f492366687 <unknown>\nE       #7 0x55f49237d4a4 <unknown>\nE       #8 0x55f49238332b <unknown>\nE       #9 0x55f492357507 <unknown>\nE       #10 0x55f49237d304 <unknown>\nE       #11 0x55f49240215f <unknown>\nE       #12 0x55f4923e3113 <unknown>\nE       #13 0x55f4923b1be0 <unknown>\nE       #14 0x55f4923b2bbe <unknown>\nE       #15 0x55f492829e4b <unknown>\nE       #16 0x55f49282dde2 <unknown>\nE       #17 0x55f492816d2c <unknown>\nE       #18 0x55f49282e957 <unknown>\nE       #19 0x55f4927fc4bf <unknown>\nE       #20 0x55f49284c348 <unknown>\nE       #21 0x55f49284c510 <unknown>\nE       #22 0x55f49285c346 <unknown>\nE       #23 0x7f1ed1a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[{"name":"Open a browser","time":{"start":1732240115443,"stop":1732240116883,"duration":1440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Find a visible element","time":{"start":1732240116884,"stop":1732240117169,"duration":285},"status":"passed","steps":[{"name":"Find a present element","time":{"start":1732240116884,"stop":1732240117043,"duration":159},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//dl[@id='narrow-by-list2']//a[text()='Fitness Equipment']\")"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Go to specified element","time":{"start":1732240117044,"stop":1732240117141,"duration":97},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"af8b95b2cd5978010b4fcf8778bf31fc\", element=\"f.1515B93ED175AF3C5136D6C48D4AC76A.d.0942D40B559CD63F4200C084B748F1BC.e.41\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//dl[@id='narrow-by-list2']//a[text()='Fitness Equipment']\")"},{"name":"timeout","value":"10"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1732240717524,"stop":1732240717624,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder::0","time":{"start":1732242126197,"stop":1732242126197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_gear"},{"name":"subSuite","value":"TestGearPage"},{"name":"host","value":"fv-az883-121"},{"name":"thread","value":"2842-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_gear"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":5,"unknown":0,"total":6},"items":[{"uid":"3eb8237bb82a4eb3","reportUrl":"https://verafes.github.io/luma_project/501//#testresult/3eb8237bb82a4eb3","status":"passed","time":{"start":1732153618779,"stop":1732153622467,"duration":3688}},{"uid":"47b7d6d960962788","reportUrl":"https://verafes.github.io/luma_project/500//#testresult/47b7d6d960962788","status":"passed","time":{"start":1732067296713,"stop":1732067301144,"duration":4431}},{"uid":"188010fa1ca0a9b3","reportUrl":"https://verafes.github.io/luma_project/499//#testresult/188010fa1ca0a9b3","status":"passed","time":{"start":1731981192932,"stop":1731981195836,"duration":2904}},{"uid":"a5a918cfcf821a3e","reportUrl":"https://verafes.github.io/luma_project/498//#testresult/a5a918cfcf821a3e","status":"passed","time":{"start":1731894670445,"stop":1731894675358,"duration":4913}},{"uid":"14e6bda961f3da5d","reportUrl":"https://verafes.github.io/luma_project/497//#testresult/14e6bda961f3da5d","status":"passed","time":{"start":1731808354332,"stop":1731808359423,"duration":5091}}]},"tags":[]},"source":"642e19a141fd13ef.json","parameterValues":[]}