{"uid":"b2ad709c21167632","name":"tc 07.02.08 Verify that 'Proceed to checkout' button redirects to the shipping page","fullName":"tests.test_shopping_cart.TestShoppingCartFull#test_tc_07_02_08_verify_proceed_to_checkout_button_leads_to_the_shipping_page","historyId":"9ea104d91506ad7602cf69e28583a223","time":{"start":1731376615275,"stop":1731376616513,"duration":1238},"description":"Verify that the 'Proceed to checkout' button redirects to the shipping page.","descriptionHtml":"<p>Verify that the 'Proceed to checkout' button redirects to the shipping page.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <div id=\"aswift_5_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x55ed72e5b13a <unknown>\n#1 0x55ed72976460 <unknown>\n#2 0x55ed729c9b26 <unknown>\n#3 0x55ed729c7aad <unknown>\n#4 0x55ed729c5557 <unknown>\n#5 0x55ed729c4971 <unknown>\n#6 0x55ed729b7f78 <unknown>\n#7 0x55ed729e7012 <unknown>\n#8 0x55ed729b7958 <unknown>\n#9 0x55ed729e71de <unknown>\n#10 0x55ed72a05af6 <unknown>\n#11 0x55ed729e6db3 <unknown>\n#12 0x55ed729b5c10 <unknown>\n#13 0x55ed729b6bee <unknown>\n#14 0x55ed72e273cb <unknown>\n#15 0x55ed72e2b368 <unknown>\n#16 0x55ed72e14eec <unknown>\n#17 0x55ed72e2bee7 <unknown>\n#18 0x55ed72dfa13f <unknown>\n#19 0x55ed72e49858 <unknown>\n#20 0x55ed72e49a20 <unknown>\n#21 0x55ed72e59fb6 <unknown>\n#22 0x7f4f1ac94ac3 <unknown>","statusTrace":"self = <test_shopping_cart.TestShoppingCartFull object at 0x7fc0f2d3d6d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c0c6b8157d7c92de9f3de35c8a7487bf\")>\nfull_cart_page = None\n\n    @allure.title(\"tc 07.02.08 Verify that 'Proceed to checkout' button redirects to the shipping page\")\n    def test_tc_07_02_08_verify_proceed_to_checkout_button_leads_to_the_shipping_page(self, driver, full_cart_page):\n        \"\"\"Verify that the 'Proceed to checkout' button redirects to the shipping page.\"\"\"\n        page = ShoppingCartPage(driver, SHOPPING_CART_PAGE)\n>       link = page.check_checkout_button_redirects_to_shipping_page()\n\ntests/test_shopping_cart.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/shopping_cart_page.py:113: in check_checkout_button_redirects_to_shipping_page\n    button.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f2cc3510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55ed72e49a20 \\\\u003Cunknown>\\\\n#21 0x55ed72e59fb6 \\\\u003Cunknown>\\\\n#22 0x7f4f1ac94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <div id=\"aswift_5_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\nE         (Session info: chrome=130.0.6723.91)\nE       Stacktrace:\nE       #0 0x55ed72e5b13a <unknown>\nE       #1 0x55ed72976460 <unknown>\nE       #2 0x55ed729c9b26 <unknown>\nE       #3 0x55ed729c7aad <unknown>\nE       #4 0x55ed729c5557 <unknown>\nE       #5 0x55ed729c4971 <unknown>\nE       #6 0x55ed729b7f78 <unknown>\nE       #7 0x55ed729e7012 <unknown>\nE       #8 0x55ed729b7958 <unknown>\nE       #9 0x55ed729e71de <unknown>\nE       #10 0x55ed72a05af6 <unknown>\nE       #11 0x55ed729e6db3 <unknown>\nE       #12 0x55ed729b5c10 <unknown>\nE       #13 0x55ed729b6bee <unknown>\nE       #14 0x55ed72e273cb <unknown>\nE       #15 0x55ed72e2b368 <unknown>\nE       #16 0x55ed72e14eec <unknown>\nE       #17 0x55ed72e2bee7 <unknown>\nE       #18 0x55ed72dfa13f <unknown>\nE       #19 0x55ed72e49858 <unknown>\nE       #20 0x55ed72e49a20 <unknown>\nE       #21 0x55ed72e59fb6 <unknown>\nE       #22 0x7f4f1ac94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1731375310573,"stop":1731375310638,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder","time":{"start":1731375310638,"stop":1731375310638,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1731376607532,"stop":1731376608730,"duration":1198},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"full_cart_page","time":{"start":1731376608730,"stop":1731376615274,"duration":6544},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify that the 'Proceed to checkout' button redirects to the shipping page.","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <div id=\"aswift_5_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x55ed72e5b13a <unknown>\n#1 0x55ed72976460 <unknown>\n#2 0x55ed729c9b26 <unknown>\n#3 0x55ed729c7aad <unknown>\n#4 0x55ed729c5557 <unknown>\n#5 0x55ed729c4971 <unknown>\n#6 0x55ed729b7f78 <unknown>\n#7 0x55ed729e7012 <unknown>\n#8 0x55ed729b7958 <unknown>\n#9 0x55ed729e71de <unknown>\n#10 0x55ed72a05af6 <unknown>\n#11 0x55ed729e6db3 <unknown>\n#12 0x55ed729b5c10 <unknown>\n#13 0x55ed729b6bee <unknown>\n#14 0x55ed72e273cb <unknown>\n#15 0x55ed72e2b368 <unknown>\n#16 0x55ed72e14eec <unknown>\n#17 0x55ed72e2bee7 <unknown>\n#18 0x55ed72dfa13f <unknown>\n#19 0x55ed72e49858 <unknown>\n#20 0x55ed72e49a20 <unknown>\n#21 0x55ed72e59fb6 <unknown>\n#22 0x7f4f1ac94ac3 <unknown>","statusTrace":"self = <test_shopping_cart.TestShoppingCartFull object at 0x7fc0f2d3d6d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c0c6b8157d7c92de9f3de35c8a7487bf\")>\nfull_cart_page = None\n\n    @allure.title(\"tc 07.02.08 Verify that 'Proceed to checkout' button redirects to the shipping page\")\n    def test_tc_07_02_08_verify_proceed_to_checkout_button_leads_to_the_shipping_page(self, driver, full_cart_page):\n        \"\"\"Verify that the 'Proceed to checkout' button redirects to the shipping page.\"\"\"\n        page = ShoppingCartPage(driver, SHOPPING_CART_PAGE)\n>       link = page.check_checkout_button_redirects_to_shipping_page()\n\ntests/test_shopping_cart.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/shopping_cart_page.py:113: in check_checkout_button_redirects_to_shipping_page\n    button.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0f2cc3510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55ed72e49a20 \\\\u003Cunknown>\\\\n#21 0x55ed72e59fb6 \\\\u003Cunknown>\\\\n#22 0x7f4f1ac94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <div id=\"aswift_5_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\nE         (Session info: chrome=130.0.6723.91)\nE       Stacktrace:\nE       #0 0x55ed72e5b13a <unknown>\nE       #1 0x55ed72976460 <unknown>\nE       #2 0x55ed729c9b26 <unknown>\nE       #3 0x55ed729c7aad <unknown>\nE       #4 0x55ed729c5557 <unknown>\nE       #5 0x55ed729c4971 <unknown>\nE       #6 0x55ed729b7f78 <unknown>\nE       #7 0x55ed729e7012 <unknown>\nE       #8 0x55ed729b7958 <unknown>\nE       #9 0x55ed729e71de <unknown>\nE       #10 0x55ed72a05af6 <unknown>\nE       #11 0x55ed729e6db3 <unknown>\nE       #12 0x55ed729b5c10 <unknown>\nE       #13 0x55ed729b6bee <unknown>\nE       #14 0x55ed72e273cb <unknown>\nE       #15 0x55ed72e2b368 <unknown>\nE       #16 0x55ed72e14eec <unknown>\nE       #17 0x55ed72e2bee7 <unknown>\nE       #18 0x55ed72dfa13f <unknown>\nE       #19 0x55ed72e49858 <unknown>\nE       #20 0x55ed72e49a20 <unknown>\nE       #21 0x55ed72e59fb6 <unknown>\nE       #22 0x7f4f1ac94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Check 'Proceed to checkout' button redirects to the shipping page","time":{"start":1731376615275,"stop":1731376616513,"duration":1238},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1410, 848). Other element would receive the click: <div id=\"aswift_5_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x55ed72e5b13a <unknown>\n#1 0x55ed72976460 <unknown>\n#2 0x55ed729c9b26 <unknown>\n#3 0x55ed729c7aad <unknown>\n#4 0x55ed729c5557 <unknown>\n#5 0x55ed729c4971 <unknown>\n#6 0x55ed729b7f78 <unknown>\n#7 0x55ed729e7012 <unknown>\n#8 0x55ed729b7958 <unknown>\n#9 0x55ed729e71de <unknown>\n#10 0x55ed72a05af6 <unknown>\n#11 0x55ed729e6db3 <unknown>\n#12 0x55ed729b5c10 <unknown>\n#13 0x55ed729b6bee <unknown>\n#14 0x55ed72e273cb <unknown>\n#15 0x55ed72e2b368 <unknown>\n#16 0x55ed72e14eec <unknown>\n#17 0x55ed72e2bee7 <unknown>\n#18 0x55ed72dfa13f <unknown>\n#19 0x55ed72e49858 <unknown>\n#20 0x55ed72e49a20 <unknown>\n#21 0x55ed72e59fb6 <unknown>\n#22 0x7f4f1ac94ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/shopping_cart_page.py\", line 113, in check_checkout_button_redirects_to_shipping_page\n    button.click()\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Find clickable elements","time":{"start":1731376615275,"stop":1731376615405,"duration":130},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'button.action.primary.checkout span')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"fd2da227d8b9c647","name":"Screenshot","source":"fd2da227d8b9c647.png","type":"image/png","size":95139},{"uid":"16462430061f18f3","name":"HTML source","source":"16462430061f18f3.html","type":"text/html","size":242679}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1731376616665,"stop":1731376616751,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder::0","time":{"start":1731377096886,"stop":1731377096886,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Shopping Cart is full"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_shopping_cart"},{"name":"subSuite","value":"TestShoppingCartFull"},{"name":"host","value":"fv-az738-41"},{"name":"thread","value":"2809-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_shopping_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"5f0a287cf33c796a","reportUrl":"https://verafes.github.io/luma_project/491//#testresult/5f0a287cf33c796a","status":"passed","time":{"start":1731290245886,"stop":1731290250326,"duration":4440}},{"uid":"3c3f4e568d67cb95","reportUrl":"https://verafes.github.io/luma_project/490//#testresult/3c3f4e568d67cb95","status":"passed","time":{"start":1731204075201,"stop":1731204079661,"duration":4460}}]},"tags":[]},"source":"b2ad709c21167632.json","parameterValues":[]}