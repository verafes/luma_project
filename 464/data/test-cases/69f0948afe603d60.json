{"uid":"69f0948afe603d60","name":"TC 03.02.04 Verify error on attempting to log in with empty email - Negative","fullName":"tests.test_sign_in.TestLogin#test_03_02_04_error_if_login_with_empty_email","historyId":"0612bfc6f6c6592dd151e1051506267d","time":{"start":1728958120076,"stop":1728958121336,"duration":1260},"description":"Check error message on attempt to log in with empty email","descriptionHtml":"<p>Check error message on attempt to log in with empty email</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\n  (Session info: chrome=129.0.6668.89)\nStacktrace:\n#0 0x559b4730802a <unknown>\n#1 0x559b46fee5e0 <unknown>\n#2 0x559b47044866 <unknown>\n#3 0x559b4704278d <unknown>\n#4 0x559b47040237 <unknown>\n#5 0x559b4703f646 <unknown>\n#6 0x559b47032a98 <unknown>\n#7 0x559b47062b22 <unknown>\n#8 0x559b47032478 <unknown>\n#9 0x559b47062cee <unknown>\n#10 0x559b47081d7d <unknown>\n#11 0x559b470628c3 <unknown>\n#12 0x559b470306b3 <unknown>\n#13 0x559b4703168e <unknown>\n#14 0x559b472d2a2b <unknown>\n#15 0x559b472d69b1 <unknown>\n#16 0x559b472bf225 <unknown>\n#17 0x559b472d7532 <unknown>\n#18 0x559b472a438f <unknown>\n#19 0x559b472f6f28 <unknown>\n#20 0x559b472f70f3 <unknown>\n#21 0x559b47306e7c <unknown>\n#22 0x7fa690894ac3 <unknown>","statusTrace":"self = <test_sign_in.TestLogin object at 0x7f317a040550>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1105fda92d9e62e31f3cfcad09f1fae6\")>\nsign_in_page = <pages.sign_in_page.SignInPage object at 0x7f317b732810>\n\n    @allure.title('TC 03.02.04 Verify error on attempting to log in with empty email - Negative')\n    def test_03_02_04_error_if_login_with_empty_email(self, driver, sign_in_page):\n        \"\"\"Check error message on attempt to log in with empty email\"\"\"\n>       sign_in_page.fill_in_email_field('')\n\ntests/test_sign_in.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/sign_in_page.py:54: in fill_in_email_field\n    self.fill_in_field(self.check_customer_email_field_is_clickable(), email)\npages/base_page.py:319: in fill_in_field\n    input_field.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f317b733090>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x559b472f70f3 \\\\u003Cunknown>\\\\n#21 0x559b47306e7c \\\\u003Cunknown>\\\\n#22 0x7fa690894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\nE         (Session info: chrome=129.0.6668.89)\nE       Stacktrace:\nE       #0 0x559b4730802a <unknown>\nE       #1 0x559b46fee5e0 <unknown>\nE       #2 0x559b47044866 <unknown>\nE       #3 0x559b4704278d <unknown>\nE       #4 0x559b47040237 <unknown>\nE       #5 0x559b4703f646 <unknown>\nE       #6 0x559b47032a98 <unknown>\nE       #7 0x559b47062b22 <unknown>\nE       #8 0x559b47032478 <unknown>\nE       #9 0x559b47062cee <unknown>\nE       #10 0x559b47081d7d <unknown>\nE       #11 0x559b470628c3 <unknown>\nE       #12 0x559b470306b3 <unknown>\nE       #13 0x559b4703168e <unknown>\nE       #14 0x559b472d2a2b <unknown>\nE       #15 0x559b472d69b1 <unknown>\nE       #16 0x559b472bf225 <unknown>\nE       #17 0x559b472d7532 <unknown>\nE       #18 0x559b472a438f <unknown>\nE       #19 0x559b472f6f28 <unknown>\nE       #20 0x559b472f70f3 <unknown>\nE       #21 0x559b47306e7c <unknown>\nE       #22 0x7fa690894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1728956341668,"stop":1728956341733,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder","time":{"start":1728956341733,"stop":1728956341733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1728958115743,"stop":1728958117008,"duration":1265},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"sign_in_page","time":{"start":1728958117009,"stop":1728958120076,"duration":3067},"status":"passed","steps":[{"name":"Open a browser","time":{"start":1728958117009,"stop":1728958120076,"duration":3067},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Check error message on attempt to log in with empty email","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\n  (Session info: chrome=129.0.6668.89)\nStacktrace:\n#0 0x559b4730802a <unknown>\n#1 0x559b46fee5e0 <unknown>\n#2 0x559b47044866 <unknown>\n#3 0x559b4704278d <unknown>\n#4 0x559b47040237 <unknown>\n#5 0x559b4703f646 <unknown>\n#6 0x559b47032a98 <unknown>\n#7 0x559b47062b22 <unknown>\n#8 0x559b47032478 <unknown>\n#9 0x559b47062cee <unknown>\n#10 0x559b47081d7d <unknown>\n#11 0x559b470628c3 <unknown>\n#12 0x559b470306b3 <unknown>\n#13 0x559b4703168e <unknown>\n#14 0x559b472d2a2b <unknown>\n#15 0x559b472d69b1 <unknown>\n#16 0x559b472bf225 <unknown>\n#17 0x559b472d7532 <unknown>\n#18 0x559b472a438f <unknown>\n#19 0x559b472f6f28 <unknown>\n#20 0x559b472f70f3 <unknown>\n#21 0x559b47306e7c <unknown>\n#22 0x7fa690894ac3 <unknown>","statusTrace":"self = <test_sign_in.TestLogin object at 0x7f317a040550>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1105fda92d9e62e31f3cfcad09f1fae6\")>\nsign_in_page = <pages.sign_in_page.SignInPage object at 0x7f317b732810>\n\n    @allure.title('TC 03.02.04 Verify error on attempting to log in with empty email - Negative')\n    def test_03_02_04_error_if_login_with_empty_email(self, driver, sign_in_page):\n        \"\"\"Check error message on attempt to log in with empty email\"\"\"\n>       sign_in_page.fill_in_email_field('')\n\ntests/test_sign_in.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/sign_in_page.py:54: in fill_in_email_field\n    self.fill_in_field(self.check_customer_email_field_is_clickable(), email)\npages/base_page.py:319: in fill_in_field\n    input_field.click()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f317b733090>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x559b472f70f3 \\\\u003Cunknown>\\\\n#21 0x559b47306e7c \\\\u003Cunknown>\\\\n#22 0x7fa690894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\nE         (Session info: chrome=129.0.6668.89)\nE       Stacktrace:\nE       #0 0x559b4730802a <unknown>\nE       #1 0x559b46fee5e0 <unknown>\nE       #2 0x559b47044866 <unknown>\nE       #3 0x559b4704278d <unknown>\nE       #4 0x559b47040237 <unknown>\nE       #5 0x559b4703f646 <unknown>\nE       #6 0x559b47032a98 <unknown>\nE       #7 0x559b47062b22 <unknown>\nE       #8 0x559b47032478 <unknown>\nE       #9 0x559b47062cee <unknown>\nE       #10 0x559b47081d7d <unknown>\nE       #11 0x559b470628c3 <unknown>\nE       #12 0x559b470306b3 <unknown>\nE       #13 0x559b4703168e <unknown>\nE       #14 0x559b472d2a2b <unknown>\nE       #15 0x559b472d69b1 <unknown>\nE       #16 0x559b472bf225 <unknown>\nE       #17 0x559b472d7532 <unknown>\nE       #18 0x559b472a438f <unknown>\nE       #19 0x559b472f6f28 <unknown>\nE       #20 0x559b472f70f3 <unknown>\nE       #21 0x559b47306e7c <unknown>\nE       #22 0x7fa690894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Fill in Email field","time":{"start":1728958120076,"stop":1728958121335,"duration":1259},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\n  (Session info: chrome=129.0.6668.89)\nStacktrace:\n#0 0x559b4730802a <unknown>\n#1 0x559b46fee5e0 <unknown>\n#2 0x559b47044866 <unknown>\n#3 0x559b4704278d <unknown>\n#4 0x559b47040237 <unknown>\n#5 0x559b4703f646 <unknown>\n#6 0x559b47032a98 <unknown>\n#7 0x559b47062b22 <unknown>\n#8 0x559b47032478 <unknown>\n#9 0x559b47062cee <unknown>\n#10 0x559b47081d7d <unknown>\n#11 0x559b470628c3 <unknown>\n#12 0x559b470306b3 <unknown>\n#13 0x559b4703168e <unknown>\n#14 0x559b472d2a2b <unknown>\n#15 0x559b472d69b1 <unknown>\n#16 0x559b472bf225 <unknown>\n#17 0x559b472d7532 <unknown>\n#18 0x559b472a438f <unknown>\n#19 0x559b472f6f28 <unknown>\n#20 0x559b472f70f3 <unknown>\n#21 0x559b47306e7c <unknown>\n#22 0x7fa690894ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/sign_in_page.py\", line 54, in fill_in_email_field\n    self.fill_in_field(self.check_customer_email_field_is_clickable(), email)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/base_page.py\", line 319, in fill_in_field\n    input_field.click()\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Check Email field is clickable","time":{"start":1728958120076,"stop":1728958120120,"duration":44},"status":"passed","steps":[{"name":"Find clickable elements","time":{"start":1728958120076,"stop":1728958120120,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', '#email')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Fill in a field","time":{"start":1728958120120,"stop":1728958121335,"duration":1215},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <div class=\"grippy-host\"></div>\n  (Session info: chrome=129.0.6668.89)\nStacktrace:\n#0 0x559b4730802a <unknown>\n#1 0x559b46fee5e0 <unknown>\n#2 0x559b47044866 <unknown>\n#3 0x559b4704278d <unknown>\n#4 0x559b47040237 <unknown>\n#5 0x559b4703f646 <unknown>\n#6 0x559b47032a98 <unknown>\n#7 0x559b47062b22 <unknown>\n#8 0x559b47032478 <unknown>\n#9 0x559b47062cee <unknown>\n#10 0x559b47081d7d <unknown>\n#11 0x559b470628c3 <unknown>\n#12 0x559b470306b3 <unknown>\n#13 0x559b4703168e <unknown>\n#14 0x559b472d2a2b <unknown>\n#15 0x559b472d69b1 <unknown>\n#16 0x559b472bf225 <unknown>\n#17 0x559b472d7532 <unknown>\n#18 0x559b472a438f <unknown>\n#19 0x559b472f6f28 <unknown>\n#20 0x559b472f70f3 <unknown>\n#21 0x559b47306e7c <unknown>\n#22 0x7fa690894ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/luma_project/luma_project/pages/base_page.py\", line 319, in fill_in_field\n    input_field.click()\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Find clickable elements","time":{"start":1728958120120,"stop":1728958120165,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"1105fda92d9e62e31f3cfcad09f1fae6\", element=\"f.E4FE5EA51B58495B619A370A485B1DB0.d.2AA0F86F6E0901A6A5DA9F824EE709B3.e.3\")>"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"locator","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"1105fda92d9e62e31f3cfcad09f1fae6\", element=\"f.E4FE5EA51B58495B619A370A485B1DB0.d.2AA0F86F6E0901A6A5DA9F824EE709B3.e.3\")>"},{"name":"value","value":"''"}],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"email","value":"''"}],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d15c2964f179e090","name":"Screenshot","source":"d15c2964f179e090.png","type":"image/png","size":100787},{"uid":"9ae446982fed8384","name":"HTML source","source":"9ae446982fed8384.html","type":"text/html","size":131852}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1728958121464,"stop":1728958121543,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder::0","time":{"start":1728958283105,"stop":1728958283105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Login Functionality"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_sign_in"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az702-150"},{"name":"thread","value":"2981-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_sign_in"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"bf341dcfddb3bfc","reportUrl":"https://verafes.github.io/luma_project/463//#testresult/bf341dcfddb3bfc","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[username]\" value=\"\" autocomplete=\"off\" id=\"email\" type=\"email\" class=\"input-text\" title=\"Email\" data-validate=\"{required:true, 'validate-email':true}\" aria-required=\"true\"> is not clickable at point (560, 767). Other element would receive the click: <iframe id=\"aswift_3\" name=\"aswift_3\" browsingtopics=\"true\" style=\"width: 1005px !important; height: 124px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"1005\" height=\"124\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20241009/r20190131/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-7399332034053978&amp;fa=1&amp;ifi=4&amp;uci=a!4&amp;btvi=2\" data-google-container-id=\"a!4\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CNnXzoHkjIkDFWqOjggdta83BA\" data-load-complete=\"true\"></iframe>\n  (Session info: chrome=129.0.6668.89)\nStacktrace:\n#0 0x55924c8a602a <unknown>\n#1 0x55924c58c5e0 <unknown>\n#2 0x55924c5e2866 <unknown>\n#3 0x55924c5e078d <unknown>\n#4 0x55924c5de237 <unknown>\n#5 0x55924c5dd646 <unknown>\n#6 0x55924c5d0a98 <unknown>\n#7 0x55924c600b22 <unknown>\n#8 0x55924c5d0478 <unknown>\n#9 0x55924c600cee <unknown>\n#10 0x55924c61fd7d <unknown>\n#11 0x55924c6008c3 <unknown>\n#12 0x55924c5ce6b3 <unknown>\n#13 0x55924c5cf68e <unknown>\n#14 0x55924c870a2b <unknown>\n#15 0x55924c8749b1 <unknown>\n#16 0x55924c85d225 <unknown>\n#17 0x55924c875532 <unknown>\n#18 0x55924c84238f <unknown>\n#19 0x55924c894f28 <unknown>\n#20 0x55924c8950f3 <unknown>\n#21 0x55924c8a4e7c <unknown>\n#22 0x7fc614094ac3 <unknown>","time":{"start":1728871443988,"stop":1728871445152,"duration":1164}},{"uid":"d7f642383b4cebac","reportUrl":"https://verafes.github.io/luma_project/462//#testresult/d7f642383b4cebac","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input name=\"login[password]\" type=\"password\" autocomplete=\"off\" class=\"input-text\" id=\"pass\" title=\"Password\" data-validate=\"{required:true}\" aria-required=\"true\"> is not clickable at point (560, 845). Other element would receive the click: <div id=\"aswift_3_host\" style=\"border: none !important; height: 90px !important; width: 100% !important; margin: 0px !important; padding: 0px !important; position: relative !important; visibility: visible !important; background-color: transparent !important; display: inline-block !important; inset: auto !important; clear: none !important; float: none !important; max-height: none !important; max-width: none !important; opacity: 1 !important; overflow: visible !important; vertical-align: baseline !important; z-index: auto !important;\">...</div>\n  (Session info: chrome=129.0.6668.89)\nStacktrace:\n#0 0x55ddaf87702a <unknown>\n#1 0x55ddaf55d5e0 <unknown>\n#2 0x55ddaf5b3866 <unknown>\n#3 0x55ddaf5b178d <unknown>\n#4 0x55ddaf5af237 <unknown>\n#5 0x55ddaf5ae646 <unknown>\n#6 0x55ddaf5a1a98 <unknown>\n#7 0x55ddaf5d1b22 <unknown>\n#8 0x55ddaf5a1478 <unknown>\n#9 0x55ddaf5d1cee <unknown>\n#10 0x55ddaf5f0d7d <unknown>\n#11 0x55ddaf5d18c3 <unknown>\n#12 0x55ddaf59f6b3 <unknown>\n#13 0x55ddaf5a068e <unknown>\n#14 0x55ddaf841a2b <unknown>\n#15 0x55ddaf8459b1 <unknown>\n#16 0x55ddaf82e225 <unknown>\n#17 0x55ddaf846532 <unknown>\n#18 0x55ddaf81338f <unknown>\n#19 0x55ddaf865f28 <unknown>\n#20 0x55ddaf8660f3 <unknown>\n#21 0x55ddaf875e7c <unknown>\n#22 0x7fee53c94ac3 <unknown>","time":{"start":1728786264310,"stop":1728786265717,"duration":1407}}]},"tags":[]},"source":"69f0948afe603d60.json","parameterValues":[]}