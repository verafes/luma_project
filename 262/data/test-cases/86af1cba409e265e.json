{"uid":"86af1cba409e265e","name":"test_TC_11_01_05","fullName":"tests.test_gear.TestGearPage#test_TC_11_01_05","historyId":"7d5500f43f04ab501b459428d2c0b979","time":{"start":1711501928698,"stop":1711502229746,"duration":301048},"description":"Check that fitness_equipment link is correct","descriptionHtml":"<p>Check that fitness_equipment link is correct</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=123.0.6312.58)\nStacktrace:\n#0 0x55b1bdecd993 <unknown>\n#1 0x55b1bdbc8136 <unknown>\n#2 0x55b1bdbb0020 <unknown>\n#3 0x55b1bdbafd43 <unknown>\n#4 0x55b1bdbadd96 <unknown>\n#5 0x55b1bdbae41f <unknown>\n#6 0x55b1bdbbe6e5 <unknown>\n#7 0x55b1bdbd3ebc <unknown>\n#8 0x55b1bdbd948b <unknown>\n#9 0x55b1bdbaeaa2 <unknown>\n#10 0x55b1bdbd3c34 <unknown>\n#11 0x55b1bdc53671 <unknown>\n#12 0x55b1bdc34a73 <unknown>\n#13 0x55b1bdc05c93 <unknown>\n#14 0x55b1bdc0665e <unknown>\n#15 0x55b1bde9208b <unknown>\n#16 0x55b1bde96005 <unknown>\n#17 0x55b1bde80491 <unknown>\n#18 0x55b1bde96b92 <unknown>\n#19 0x55b1bde659ef <unknown>\n#20 0x55b1bdebcdf8 <unknown>\n#21 0x55b1bdebcfcb <unknown>\n#22 0x55b1bdeccae4 <unknown>\n#23 0x7fdffea94ac3 <unknown>","statusTrace":"self = <test_gear.TestGearPage object at 0x7f6050887610>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d59263d3e4144eb696bd252f27b49ac5\")>\n\n    def test_TC_11_01_05(self, driver):\n        \"\"\"Check that fitness_equipment link is correct\"\"\"\n        page = GearPage(driver, GEAR_PAGE_URL)\n        page.open()\n>       page.check_fitness_equipment_functionality()\n\ntests/test_gear.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/gear_page_.py:34: in check_fitness_equipment_functionality\n    link = fitness_equipment.click()\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f604f79e1d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55b1bdebcfcb \\\\u003Cunknown>\\\\n#22 0x55b1bdeccae4 \\\\u003Cunknown>\\\\n#23 0x7fdffea94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=123.0.6312.58)\nE       Stacktrace:\nE       #0 0x55b1bdecd993 <unknown>\nE       #1 0x55b1bdbc8136 <unknown>\nE       #2 0x55b1bdbb0020 <unknown>\nE       #3 0x55b1bdbafd43 <unknown>\nE       #4 0x55b1bdbadd96 <unknown>\nE       #5 0x55b1bdbae41f <unknown>\nE       #6 0x55b1bdbbe6e5 <unknown>\nE       #7 0x55b1bdbd3ebc <unknown>\nE       #8 0x55b1bdbd948b <unknown>\nE       #9 0x55b1bdbaeaa2 <unknown>\nE       #10 0x55b1bdbd3c34 <unknown>\nE       #11 0x55b1bdc53671 <unknown>\nE       #12 0x55b1bdc34a73 <unknown>\nE       #13 0x55b1bdc05c93 <unknown>\nE       #14 0x55b1bdc0665e <unknown>\nE       #15 0x55b1bde9208b <unknown>\nE       #16 0x55b1bde96005 <unknown>\nE       #17 0x55b1bde80491 <unknown>\nE       #18 0x55b1bde96b92 <unknown>\nE       #19 0x55b1bde659ef <unknown>\nE       #20 0x55b1bdebcdf8 <unknown>\nE       #21 0x55b1bdebcfcb <unknown>\nE       #22 0x55b1bdeccae4 <unknown>\nE       #23 0x7fdffea94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1711501711325,"stop":1711501711389,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder","time":{"start":1711501711390,"stop":1711501711390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1711501927666,"stop":1711501928697,"duration":1031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Check that fitness_equipment link is correct","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=123.0.6312.58)\nStacktrace:\n#0 0x55b1bdecd993 <unknown>\n#1 0x55b1bdbc8136 <unknown>\n#2 0x55b1bdbb0020 <unknown>\n#3 0x55b1bdbafd43 <unknown>\n#4 0x55b1bdbadd96 <unknown>\n#5 0x55b1bdbae41f <unknown>\n#6 0x55b1bdbbe6e5 <unknown>\n#7 0x55b1bdbd3ebc <unknown>\n#8 0x55b1bdbd948b <unknown>\n#9 0x55b1bdbaeaa2 <unknown>\n#10 0x55b1bdbd3c34 <unknown>\n#11 0x55b1bdc53671 <unknown>\n#12 0x55b1bdc34a73 <unknown>\n#13 0x55b1bdc05c93 <unknown>\n#14 0x55b1bdc0665e <unknown>\n#15 0x55b1bde9208b <unknown>\n#16 0x55b1bde96005 <unknown>\n#17 0x55b1bde80491 <unknown>\n#18 0x55b1bde96b92 <unknown>\n#19 0x55b1bde659ef <unknown>\n#20 0x55b1bdebcdf8 <unknown>\n#21 0x55b1bdebcfcb <unknown>\n#22 0x55b1bdeccae4 <unknown>\n#23 0x7fdffea94ac3 <unknown>","statusTrace":"self = <test_gear.TestGearPage object at 0x7f6050887610>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d59263d3e4144eb696bd252f27b49ac5\")>\n\n    def test_TC_11_01_05(self, driver):\n        \"\"\"Check that fitness_equipment link is correct\"\"\"\n        page = GearPage(driver, GEAR_PAGE_URL)\n        page.open()\n>       page.check_fitness_equipment_functionality()\n\ntests/test_gear.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/gear_page_.py:34: in check_fitness_equipment_functionality\n    link = fitness_equipment.click()\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f604f79e1d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x55b1bdebcfcb \\\\u003Cunknown>\\\\n#22 0x55b1bdeccae4 \\\\u003Cunknown>\\\\n#23 0x7fdffea94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=123.0.6312.58)\nE       Stacktrace:\nE       #0 0x55b1bdecd993 <unknown>\nE       #1 0x55b1bdbc8136 <unknown>\nE       #2 0x55b1bdbb0020 <unknown>\nE       #3 0x55b1bdbafd43 <unknown>\nE       #4 0x55b1bdbadd96 <unknown>\nE       #5 0x55b1bdbae41f <unknown>\nE       #6 0x55b1bdbbe6e5 <unknown>\nE       #7 0x55b1bdbd3ebc <unknown>\nE       #8 0x55b1bdbd948b <unknown>\nE       #9 0x55b1bdbaeaa2 <unknown>\nE       #10 0x55b1bdbd3c34 <unknown>\nE       #11 0x55b1bdc53671 <unknown>\nE       #12 0x55b1bdc34a73 <unknown>\nE       #13 0x55b1bdc05c93 <unknown>\nE       #14 0x55b1bdc0665e <unknown>\nE       #15 0x55b1bde9208b <unknown>\nE       #16 0x55b1bde96005 <unknown>\nE       #17 0x55b1bde80491 <unknown>\nE       #18 0x55b1bde96b92 <unknown>\nE       #19 0x55b1bde659ef <unknown>\nE       #20 0x55b1bdebcdf8 <unknown>\nE       #21 0x55b1bdebcfcb <unknown>\nE       #22 0x55b1bdeccae4 <unknown>\nE       #23 0x7fdffea94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[{"name":"Open a browser","time":{"start":1711501928698,"stop":1711501929567,"duration":869},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Find a visible element","time":{"start":1711501929567,"stop":1711501929633,"duration":66},"status":"passed","steps":[{"name":"Find a present element","time":{"start":1711501929568,"stop":1711501929587,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//dl[@id='narrow-by-list2']//a[text()='Fitness Equipment']\")"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Go to specified element","time":{"start":1711501929587,"stop":1711501929598,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"d59263d3e4144eb696bd252f27b49ac5\", element=\"f.FD6D8863FA9BEDA0451A4EAE10617C36.d.47A87A192F8D4C38F82A1CCE250A7BF1.e.12\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//dl[@id='narrow-by-list2']//a[text()='Fitness Equipment']\")"},{"name":"timeout","value":"10"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d00158b17296977b","name":"Screenshot","source":"d00158b17296977b.png","type":"image/png","size":819885},{"uid":"1799114843791237","name":"HTML source","source":"1799114843791237.html","type":"text/html","size":99251}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1711502230049,"stop":1711502230137,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_result_folder::0","time":{"start":1711503135281,"stop":1711503135281,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_gear"},{"name":"subSuite","value":"TestGearPage"},{"name":"host","value":"fv-az881-114"},{"name":"thread","value":"3060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_gear"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"9586a2fc60020f9d","reportUrl":"https://verafes.github.io/luma_project/261//#testresult/9586a2fc60020f9d","status":"passed","time":{"start":1711415570293,"stop":1711415571836,"duration":1543}}]},"tags":[]},"source":"86af1cba409e265e.json","parameterValues":[]}